
modbus_slave_22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058bc  080058bc  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200000d4  08005998  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08005998  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c590  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fed  00000000  00000000  0002c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002e688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dd2  00000000  00000000  0002f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cffc  00000000  00000000  00052612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f15  00000000  00000000  0005f60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  00135574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005640 	.word	0x08005640

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	08005640 	.word	0x08005640

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <HAL_UARTEx_RxEventCallback>:

static uint16_t Holding_Registers_Database[50] ;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d117      	bne.n	8000f80 <HAL_UARTEx_RxEventCallback+0x44>
	{
		switch (RxData[1]){
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d00c      	beq.n	8000f72 <HAL_UARTEx_RxEventCallback+0x36>
 8000f58:	2b10      	cmp	r3, #16
 8000f5a:	dc0d      	bgt.n	8000f78 <HAL_UARTEx_RxEventCallback+0x3c>
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d002      	beq.n	8000f66 <HAL_UARTEx_RxEventCallback+0x2a>
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d003      	beq.n	8000f6c <HAL_UARTEx_RxEventCallback+0x30>
 8000f64:	e008      	b.n	8000f78 <HAL_UARTEx_RxEventCallback+0x3c>
		case 0x03:
			readHoldingRegs();
 8000f66:	f000 fad9 	bl	800151c <readHoldingRegs>
			break;
 8000f6a:	e00a      	b.n	8000f82 <HAL_UARTEx_RxEventCallback+0x46>
		case 0x05:
			writeSingleReg();
 8000f6c:	f000 fbda 	bl	8001724 <writeSingleReg>
			break;
 8000f70:	e007      	b.n	8000f82 <HAL_UARTEx_RxEventCallback+0x46>
		case 0x10:
			writeHoldingRegs();
 8000f72:	f000 fb5d 	bl	8001630 <writeHoldingRegs>
			break;
 8000f76:	e004      	b.n	8000f82 <HAL_UARTEx_RxEventCallback+0x46>
		default:
			modbusException(ILLEGAL_FUNCTION);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 faaf 	bl	80014dc <modbusException>
			break;
 8000f7e:	e000      	b.n	8000f82 <HAL_UARTEx_RxEventCallback+0x46>
		}
	}
 8000f80:	bf00      	nop

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 8000f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f86:	4904      	ldr	r1, [pc, #16]	; (8000f98 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <HAL_UARTEx_RxEventCallback+0x60>)
 8000f8a:	f002 fcd6 	bl	800393a <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000017c 	.word	0x2000017c
 8000f9c:	20000138 	.word	0x20000138

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fdb2 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f816 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 f8fe 	bl	80011ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 f8d2 	bl	8001158 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fb4:	f000 f87e 	bl	80010b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fbc:	4903      	ldr	r1, [pc, #12]	; (8000fcc <main+0x2c>)
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <main+0x30>)
 8000fc0:	f002 fcbb 	bl	800393a <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_ADC_Start_IT(&hadc1);
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <main+0x34>)
 8000fc6:	f000 fe57 	bl	8001c78 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <main+0x2a>
 8000fcc:	2000017c 	.word	0x2000017c
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	200000f0 	.word	0x200000f0

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	2234      	movs	r2, #52	; 0x34
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fc9c 	bl	8004924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SystemClock_Config+0xd4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a29      	ldr	r2, [pc, #164]	; (80010ac <SystemClock_Config+0xd4>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <SystemClock_Config+0xd4>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <SystemClock_Config+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <SystemClock_Config+0xd8>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <SystemClock_Config+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800104c:	2310      	movs	r3, #16
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001050:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f8ea 	bl	8003240 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001072:	f000 f909 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2302      	movs	r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd8a 	bl	8002bac <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800109e:	f000 f8f3 	bl	8001288 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0x98>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_ADC1_Init+0x9c>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_ADC1_Init+0x98>)
 80010ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_ADC1_Init+0x98>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_ADC1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_ADC1_Init+0x98>)
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <MX_ADC1_Init+0xa0>)
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_ADC1_Init+0x98>)
 8001102:	2201      	movs	r2, #1
 8001104:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_ADC1_Init+0x98>)
 8001110:	2201      	movs	r2, #1
 8001112:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_ADC1_Init+0x98>)
 8001116:	f000 fd6b 	bl	8001bf0 <HAL_ADC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f8b2 	bl	8001288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0x98>)
 8001136:	f000 ffaf 	bl	8002098 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001140:	f000 f8a2 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000f0 	.word	0x200000f0
 8001150:	40012000 	.word	0x40012000
 8001154:	0f000001 	.word	0x0f000001

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f002 faf4 	bl	800377c <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f875 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000138 	.word	0x20000138
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <MX_GPIO_Init+0xd0>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <MX_GPIO_Init+0xd0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <MX_GPIO_Init+0xd0>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001238:	f001 fc9e 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001242:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0xd8>)
 8001254:	f001 fafc 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001270:	f001 faee 	bl	8002850 <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020800 	.word	0x40020800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
 8001292:	0000      	movs	r0, r0
 8001294:	0000      	movs	r0, r0
	...

08001298 <HAL_ADC_ConvCpltCallback>:
float T;
uint16_t tempInt;

char uart_buf[100];
// Function to read temperature (No Hold Master Mode)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800129c:	b094      	sub	sp, #80	; 0x50
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	f040 80c1 	bne.w	8001430 <HAL_ADC_ConvCpltCallback+0x198>
        uint16_t adcValue = HAL_ADC_GetValue(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fed0 	bl	8002054 <HAL_ADC_GetValue>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        char uart_buf[50];
        snprintf(uart_buf, sizeof(uart_buf), "ADC Value: %u\r\n", (unsigned int)adcValue);
 80012ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012be:	f107 0008 	add.w	r0, r7, #8
 80012c2:	4a68      	ldr	r2, [pc, #416]	; (8001464 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80012c4:	2132      	movs	r1, #50	; 0x32
 80012c6:	f003 fb35 	bl	8004934 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ff9e 	bl	8000210 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	4861      	ldr	r0, [pc, #388]	; (8001468 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80012e2:	f002 fa98 	bl	8003816 <HAL_UART_Transmit>

        float voltage = (3.3f / 4095.0f) * adcValue;
 80012e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800146c <HAL_ADC_ConvCpltCallback+0x1d4>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        float R2 = R1 * ((3.3f / voltage) - 1.0);
 80012fe:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001470 <HAL_ADC_ConvCpltCallback+0x1d8>
 8001302:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001306:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800130a:	ee16 0a90 	vmov	r0, s13
 800130e:	f7ff f93b 	bl	8000588 <__aeabi_f2d>
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001318:	f7fe ffd6 	bl	80002c8 <__aeabi_dsub>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	a346      	add	r3, pc, #280	; (adr r3, 8001440 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f985 	bl	8000638 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc2f 	bl	8000b98 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
        float logR2 = log(R2);
 800133e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001340:	f7ff f922 	bl	8000588 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b10 	vmov	d0, r2, r3
 800134c:	f003 ff74 	bl	8005238 <log>
 8001350:	ec53 2b10 	vmov	r2, r3, d0
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fc1e 	bl	8000b98 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
        float T = 1.0f / (C1 + C2 * logR2 + C3 * logR2 * logR2 * logR2);
 8001360:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	a338      	add	r3, pc, #224	; (adr r3, 8001448 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f964 	bl	8000638 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	a335      	add	r3, pc, #212	; (adr r3, 8001450 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7fe ffa5 	bl	80002cc <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800138c:	f7ff f8fc 	bl	8000588 <__aeabi_f2d>
 8001390:	a331      	add	r3, pc, #196	; (adr r3, 8001458 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f94f 	bl	8000638 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4690      	mov	r8, r2
 80013a0:	4699      	mov	r9, r3
 80013a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013a4:	f7ff f8f0 	bl	8000588 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4640      	mov	r0, r8
 80013ae:	4649      	mov	r1, r9
 80013b0:	f7ff f942 	bl	8000638 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013be:	f7ff f8e3 	bl	8000588 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4640      	mov	r0, r8
 80013c8:	4649      	mov	r1, r9
 80013ca:	f7ff f935 	bl	8000638 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff79 	bl	80002cc <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	4924      	ldr	r1, [pc, #144]	; (8001474 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80013e4:	f7ff fa52 	bl	800088c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbd2 	bl	8000b98 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        T -= 273.15f;  // Convert Kelvin to Celsius
 80013f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001478 <HAL_ADC_ConvCpltCallback+0x1e0>
 8001400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001404:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        // Convert temperature to 16-bit integer
        uint16_t tempInt = (uint16_t)((T + 40.0f) * 10.0f);  // Example conversion, adjust as needed
 8001408:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800140c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800147c <HAL_ADC_ConvCpltCallback+0x1e4>
 8001410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001414:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001420:	ee17 3a90 	vmov	r3, s15
 8001424:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Store temperature in Holding Registers
        Holding_Registers_Database[1] = tempInt;
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800142a:	8053      	strh	r3, [r2, #2]

        // Call writeHoldingRegs to update register value
        writeHoldingRegs();
 800142c:	f000 f900 	bl	8001630 <writeHoldingRegs>
    }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	; 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	00000000 	.word	0x00000000
 8001444:	40c38800 	.word	0x40c38800
 8001448:	6fb4c3c2 	.word	0x6fb4c3c2
 800144c:	3f2eafee 	.word	0x3f2eafee
 8001450:	6edeb890 	.word	0x6edeb890
 8001454:	3f527ffd 	.word	0x3f527ffd
 8001458:	14170d19 	.word	0x14170d19
 800145c:	3e7788eb 	.word	0x3e7788eb
 8001460:	40012000 	.word	0x40012000
 8001464:	08005658 	.word	0x08005658
 8001468:	20000138 	.word	0x20000138
 800146c:	3a534067 	.word	0x3a534067
 8001470:	40533333 	.word	0x40533333
 8001474:	3ff00000 	.word	0x3ff00000
 8001478:	43889333 	.word	0x43889333
 800147c:	42200000 	.word	0x42200000
 8001480:	20000000 	.word	0x20000000

08001484 <sendData>:




// Function to send data with CRC calculation
void sendData(uint8_t *data, int size) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    uint16_t crc = crc16(data, size);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f98f 	bl	80017b8 <crc16>
 800149a:	4603      	mov	r3, r0
 800149c:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;          // CRC LOW
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF; // CRC HIGH
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b299      	uxth	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, data, size + 2, 1000);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3302      	adds	r3, #2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <sendData+0x54>)
 80014cc:	f002 f9a3 	bl	8003816 <HAL_UART_Transmit>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000138 	.word	0x20000138

080014dc <modbusException>:

// Function to handle Modbus exceptions
void modbusException(uint8_t exceptionCode) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];          // Slave ID
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <modbusException+0x38>)
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <modbusException+0x3c>)
 80014ec:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;   // Exception code
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <modbusException+0x38>)
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <modbusException+0x3c>)
 80014fa:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;      // Load the Exception code
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <modbusException+0x3c>)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 8001502:	2103      	movs	r1, #3
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <modbusException+0x3c>)
 8001506:	f7ff ffbd 	bl	8001484 <sendData>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000017c 	.word	0x2000017c
 8001518:	2000027c 	.word	0x2000027c

0800151c <readHoldingRegs>:

// Function to read Holding Registers
uint8_t readHoldingRegs(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
    uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);  // start Register Address
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <readHoldingRegs+0x108>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <readHoldingRegs+0x108>)
 800152c:	78db      	ldrb	r3, [r3, #3]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	82fb      	strh	r3, [r7, #22]
    uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);   // number of registers master has requested
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <readHoldingRegs+0x108>)
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b39      	ldr	r3, [pc, #228]	; (8001624 <readHoldingRegs+0x108>)
 8001540:	795b      	ldrb	r3, [r3, #5]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	817b      	strh	r3, [r7, #10]

    if ((numRegs < 1) || (numRegs > 125)) {  // maximum number of Registers as per the PDF
 800154a:	897b      	ldrh	r3, [r7, #10]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <readHoldingRegs+0x3a>
 8001550:	897b      	ldrh	r3, [r7, #10]
 8001552:	2b7d      	cmp	r3, #125	; 0x7d
 8001554:	d904      	bls.n	8001560 <readHoldingRegs+0x44>
        modbusException(ILLEGAL_DATA_VALUE);  // send an exception
 8001556:	2003      	movs	r0, #3
 8001558:	f7ff ffc0 	bl	80014dc <modbusException>
        return 0;
 800155c:	2300      	movs	r3, #0
 800155e:	e05d      	b.n	800161c <readHoldingRegs+0x100>
    }

    uint16_t endAddr = startAddr + numRegs - 1;  // end Register
 8001560:	8afa      	ldrh	r2, [r7, #22]
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	4413      	add	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	813b      	strh	r3, [r7, #8]
    if (endAddr > 49) {  // end Register cannot be more than 49 as we only have record of 50 Registers in total
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	2b31      	cmp	r3, #49	; 0x31
 8001570:	d904      	bls.n	800157c <readHoldingRegs+0x60>
        modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff ffb2 	bl	80014dc <modbusException>
        return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e04f      	b.n	800161c <readHoldingRegs+0x100>
    }

    // Prepare TxData buffer
    // | SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
    // | 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |
    TxData[0] = SLAVE_ID;  // slave ID
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <readHoldingRegs+0x10c>)
 800157e:	2207      	movs	r2, #7
 8001580:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];  // function code
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <readHoldingRegs+0x108>)
 8001584:	785a      	ldrb	r2, [r3, #1]
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <readHoldingRegs+0x10c>)
 8001588:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;  // Byte count
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <readHoldingRegs+0x10c>)
 8001594:	709a      	strb	r2, [r3, #2]
    int indx = 3;  // we need to keep track of how many bytes have been stored in TxData Buffer
 8001596:	2303      	movs	r3, #3
 8001598:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numRegs; i++) {   // Load the actual data into TxData buffer
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e034      	b.n	800160a <readHoldingRegs+0xee>
        if (startAddr == 1) {
 80015a0:	8afb      	ldrh	r3, [r7, #22]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d115      	bne.n	80015d2 <readHoldingRegs+0xb6>
            // Read the temperature from Holding Registers and convert to 16-bit integer
            uint16_t tempInt = Holding_Registers_Database[startAddr];
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <readHoldingRegs+0x110>)
 80015aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ae:	80fb      	strh	r3, [r7, #6]
            TxData[indx++] = (tempInt >> 8) & 0xFF;  // extract the higher byte
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	b299      	uxth	r1, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	613a      	str	r2, [r7, #16]
 80015bc:	b2c9      	uxtb	r1, r1
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <readHoldingRegs+0x10c>)
 80015c0:	54d1      	strb	r1, [r2, r3]
            TxData[indx++] = tempInt & 0xFF;  // extract the lower byte
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	613a      	str	r2, [r7, #16]
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <readHoldingRegs+0x10c>)
 80015ce:	54d1      	strb	r1, [r2, r3]
 80015d0:	e015      	b.n	80015fe <readHoldingRegs+0xe2>
        } else {
            TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF;  // extract the higher byte
 80015d2:	8afb      	ldrh	r3, [r7, #22]
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <readHoldingRegs+0x110>)
 80015d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b299      	uxth	r1, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	613a      	str	r2, [r7, #16]
 80015e4:	b2c9      	uxtb	r1, r1
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <readHoldingRegs+0x10c>)
 80015e8:	54d1      	strb	r1, [r2, r3]
            TxData[indx++] = (Holding_Registers_Database[startAddr]) & 0xFF;   // extract the lower byte
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <readHoldingRegs+0x110>)
 80015ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	613a      	str	r2, [r7, #16]
 80015f8:	b2c9      	uxtb	r1, r1
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <readHoldingRegs+0x10c>)
 80015fc:	54d1      	strb	r1, [r2, r3]
        }
        startAddr++;  // increment the register address
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	3301      	adds	r3, #1
 8001602:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < numRegs; i++) {   // Load the actual data into TxData buffer
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbc6      	blt.n	80015a0 <readHoldingRegs+0x84>
    }

    sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <readHoldingRegs+0x10c>)
 8001616:	f7ff ff35 	bl	8001484 <sendData>
    return 1;   // success
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000017c 	.word	0x2000017c
 8001628:	2000027c 	.word	0x2000027c
 800162c:	20000000 	.word	0x20000000

08001630 <writeHoldingRegs>:

// Function to write to Holding Registers
uint8_t writeHoldingRegs(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
    uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <writeHoldingRegs+0xe8>)
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <writeHoldingRegs+0xe8>)
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	81fb      	strh	r3, [r7, #14]
    uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <writeHoldingRegs+0xe8>)
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <writeHoldingRegs+0xe8>)
 8001654:	795b      	ldrb	r3, [r3, #5]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21b      	sxth	r3, r3
 800165c:	807b      	strh	r3, [r7, #2]

    if (numRegs < 1 || numRegs > 123) {
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <writeHoldingRegs+0x3a>
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	2b7b      	cmp	r3, #123	; 0x7b
 8001668:	d904      	bls.n	8001674 <writeHoldingRegs+0x44>
        modbusException(ILLEGAL_DATA_VALUE);
 800166a:	2003      	movs	r0, #3
 800166c:	f7ff ff36 	bl	80014dc <modbusException>
        return 0;
 8001670:	2300      	movs	r3, #0
 8001672:	e04d      	b.n	8001710 <writeHoldingRegs+0xe0>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8001674:	89fa      	ldrh	r2, [r7, #14]
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	803b      	strh	r3, [r7, #0]
    if (endAddr > 49) {
 8001680:	883b      	ldrh	r3, [r7, #0]
 8001682:	2b31      	cmp	r3, #49	; 0x31
 8001684:	d904      	bls.n	8001690 <writeHoldingRegs+0x60>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff ff28 	bl	80014dc <modbusException>
        return 0;
 800168c:	2300      	movs	r3, #0
 800168e:	e03f      	b.n	8001710 <writeHoldingRegs+0xe0>
    }

    int indx = 7;
 8001690:	2307      	movs	r3, #7
 8001692:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < numRegs; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	e01a      	b.n	80016d0 <writeHoldingRegs+0xa0>
        Holding_Registers_Database[startAddr] = (RxData[indx] << 8) | RxData[indx + 1];
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <writeHoldingRegs+0xe8>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	491b      	ldr	r1, [pc, #108]	; (8001718 <writeHoldingRegs+0xe8>)
 80016ac:	5ccb      	ldrb	r3, [r1, r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	b291      	uxth	r1, r2
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <writeHoldingRegs+0xec>)
 80016ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        indx += 2;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3302      	adds	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
        startAddr++;
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	3301      	adds	r3, #1
 80016c8:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < numRegs; i++) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbe0      	blt.n	800169a <writeHoldingRegs+0x6a>
    }

    TxData[0] = SLAVE_ID;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <writeHoldingRegs+0xf0>)
 80016da:	2207      	movs	r2, #7
 80016dc:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <writeHoldingRegs+0xe8>)
 80016e0:	785a      	ldrb	r2, [r3, #1]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <writeHoldingRegs+0xf0>)
 80016e4:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <writeHoldingRegs+0xe8>)
 80016e8:	789a      	ldrb	r2, [r3, #2]
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <writeHoldingRegs+0xf0>)
 80016ec:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <writeHoldingRegs+0xe8>)
 80016f0:	78da      	ldrb	r2, [r3, #3]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <writeHoldingRegs+0xf0>)
 80016f4:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <writeHoldingRegs+0xe8>)
 80016f8:	791a      	ldrb	r2, [r3, #4]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <writeHoldingRegs+0xf0>)
 80016fc:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <writeHoldingRegs+0xe8>)
 8001700:	795a      	ldrb	r2, [r3, #5]
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <writeHoldingRegs+0xf0>)
 8001704:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8001706:	2106      	movs	r1, #6
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <writeHoldingRegs+0xf0>)
 800170a:	f7ff febb 	bl	8001484 <sendData>
    return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000017c 	.word	0x2000017c
 800171c:	20000000 	.word	0x20000000
 8001720:	2000027c 	.word	0x2000027c

08001724 <writeSingleReg>:


uint8_t writeSingleReg(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
    uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <writeSingleReg+0x88>)
 800172c:	789b      	ldrb	r3, [r3, #2]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <writeSingleReg+0x88>)
 8001734:	78db      	ldrb	r3, [r3, #3]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	80fb      	strh	r3, [r7, #6]

    if (startAddr > 49) {
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b31      	cmp	r3, #49	; 0x31
 8001742:	d904      	bls.n	800174e <writeSingleReg+0x2a>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8001744:	2002      	movs	r0, #2
 8001746:	f7ff fec9 	bl	80014dc <modbusException>
        return 0;
 800174a:	2300      	movs	r3, #0
 800174c:	e029      	b.n	80017a2 <writeSingleReg+0x7e>
    }

    Holding_Registers_Database[startAddr] = (RxData[4] << 8) | RxData[5];
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <writeSingleReg+0x88>)
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <writeSingleReg+0x88>)
 8001758:	795b      	ldrb	r3, [r3, #5]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21a      	sxth	r2, r3
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	b291      	uxth	r1, r2
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <writeSingleReg+0x8c>)
 8001766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    TxData[0] = SLAVE_ID;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <writeSingleReg+0x90>)
 800176c:	2207      	movs	r2, #7
 800176e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <writeSingleReg+0x88>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <writeSingleReg+0x90>)
 8001776:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <writeSingleReg+0x88>)
 800177a:	789a      	ldrb	r2, [r3, #2]
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <writeSingleReg+0x90>)
 800177e:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <writeSingleReg+0x88>)
 8001782:	78da      	ldrb	r2, [r3, #3]
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <writeSingleReg+0x90>)
 8001786:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <writeSingleReg+0x88>)
 800178a:	791a      	ldrb	r2, [r3, #4]
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <writeSingleReg+0x90>)
 800178e:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <writeSingleReg+0x88>)
 8001792:	795a      	ldrb	r2, [r3, #5]
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <writeSingleReg+0x90>)
 8001796:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8001798:	2106      	movs	r1, #6
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <writeSingleReg+0x90>)
 800179c:	f7ff fe72 	bl	8001484 <sendData>
    return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000017c 	.word	0x2000017c
 80017b0:	20000000 	.word	0x20000000
 80017b4:	2000027c 	.word	0x2000027c

080017b8 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80017cc:	e013      	b.n	80017f6 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	4053      	eors	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <crc16+0x64>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	4053      	eors	r3, r2
 80017ea:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <crc16+0x68>)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	807a      	strh	r2, [r7, #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e6      	bne.n	80017ce <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21b      	sxth	r3, r3
 800180e:	b29b      	uxth	r3, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	08005668 	.word	0x08005668
 8001820:	08005768 	.word	0x08005768

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_MspInit+0x4c>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001862:	2007      	movs	r0, #7
 8001864:	f000 ff20 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_ADC_MspInit+0x8c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12f      	bne.n	80018f6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_ADC_MspInit+0x90>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <HAL_ADC_MspInit+0x94>)
 80018e2:	f000 ffb5 	bl	8002850 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2012      	movs	r0, #18
 80018ec:	f000 fee7 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018f0:	2012      	movs	r0, #18
 80018f2:	f000 ff00 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_UART_MspInit+0x94>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d133      	bne.n	8001996 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_UART_MspInit+0x98>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001966:	230c      	movs	r3, #12
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001976:	2307      	movs	r3, #7
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <HAL_UART_MspInit+0x9c>)
 8001982:	f000 ff65 	bl	8002850 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2026      	movs	r0, #38	; 0x26
 800198c:	f000 fe97 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001990:	2026      	movs	r0, #38	; 0x26
 8001992:	f000 feb0 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40004400 	.word	0x40004400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f8da 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <ADC_IRQHandler+0x10>)
 8001a06:	f000 fa15 	bl	8001e34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000f0 	.word	0x200000f0

08001a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <USART2_IRQHandler+0x10>)
 8001a1a:	f001 fff3 	bl	8003a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000138 	.word	0x20000138

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f002 ff3a 	bl	80048d0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20020000 	.word	0x20020000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	2000037c 	.word	0x2000037c
 8001a90:	20000398 	.word	0x20000398

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad4:	4c0b      	ldr	r4, [pc, #44]	; (8001b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae2:	f7ff ffd7 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fef9 	bl	80048dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7ff fa59 	bl	8000fa0 <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001afc:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8001b00:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001b04:	20000394 	.word	0x20000394

08001b08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <CAN1_RX0_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <HAL_Init+0x40>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_Init+0x40>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x40>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 fdb7 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fe70 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fdcf 	bl	8002712 <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 fd97 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000064 	.word	0x20000064
 8001ba8:	2000006c 	.word	0x2000006c
 8001bac:	20000068 	.word	0x20000068

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000006c 	.word	0x2000006c
 8001bd4:	20000380 	.word	0x20000380

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000380 	.word	0x20000380

08001bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e033      	b.n	8001c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe30 	bl	8001874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c36:	f023 0302 	bic.w	r3, r3, #2
 8001c3a:	f043 0202 	orr.w	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fb5a 	bl	80022fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f023 0303 	bic.w	r3, r3, #3
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5e:	e001      	b.n	8001c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Start_IT+0x1a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0bd      	b.n	8001e0e <HAL_ADC_Start_IT+0x196>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d018      	beq.n	8001cda <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb8:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_ADC_Start_IT+0x1a4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a58      	ldr	r2, [pc, #352]	; (8001e20 <HAL_ADC_Start_IT+0x1a8>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	f040 8085 	bne.w	8001df4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f023 0206 	bic.w	r2, r3, #6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_ADC_Start_IT+0x1ac>)
 8001d48:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d52:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d62:	f043 0320 	orr.w	r3, r3, #32
 8001d66:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12a      	bne.n	8001dca <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <HAL_ADC_Start_IT+0x1b0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d015      	beq.n	8001daa <HAL_ADC_Start_IT+0x132>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_ADC_Start_IT+0x1b4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_Start_IT+0x11c>
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_ADC_Start_IT+0x1ac>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <HAL_ADC_Start_IT+0x1b8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d136      	bne.n	8001e0c <HAL_ADC_Start_IT+0x194>
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_ADC_Start_IT+0x1ac>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d130      	bne.n	8001e0c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d129      	bne.n	8001e0c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e020      	b.n	8001e0c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_ADC_Start_IT+0x1b0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d11b      	bne.n	8001e0c <HAL_ADC_Start_IT+0x194>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d114      	bne.n	8001e0c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	e00b      	b.n	8001e0c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000064 	.word	0x20000064
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	40012300 	.word	0x40012300
 8001e28:	40012000 	.word	0x40012000
 8001e2c:	40012100 	.word	0x40012100
 8001e30:	40012200 	.word	0x40012200

08001e34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d049      	beq.n	8001efe <HAL_ADC_IRQHandler+0xca>
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d046      	beq.n	8001efe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d12b      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d127      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff f9d2 	bl	8001298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0212 	mvn.w	r2, #18
 8001efc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d057      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x190>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d054      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d139      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d12b      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d124      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11d      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d119      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fa9d 	bl	80024f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 020c 	mvn.w	r2, #12
 8001fc2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d017      	beq.n	800200a <HAL_ADC_IRQHandler+0x1d6>
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d014      	beq.n	800200a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f837 	bl	800206e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002018:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_ADC_IRQHandler+0x218>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0220 	mvn.w	r2, #32
 800203a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f820 	bl	8002082 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0220 	mvn.w	r2, #32
 800204a:	601a      	str	r2, [r3, #0]
  }
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e113      	b.n	80022dc <HAL_ADC_ConfigChannel+0x244>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d925      	bls.n	8002110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	3b1e      	subs	r3, #30
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e022      	b.n	8002156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	2207      	movs	r2, #7
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4403      	add	r3, r0
 800214c:	409a      	lsls	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d824      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b05      	subs	r3, #5
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
 80021a6:	e04c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b23      	subs	r3, #35	; 0x23
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	; 0x23
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e023      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	; 0x41
 800220c:	221f      	movs	r2, #31
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b41      	subs	r3, #65	; 0x41
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_ADC_ConfigChannel+0x250>)
 8002244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a28      	ldr	r2, [pc, #160]	; (80022ec <HAL_ADC_ConfigChannel+0x254>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10f      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d10b      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_ADC_ConfigChannel+0x254>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12b      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <HAL_ADC_ConfigChannel+0x1f4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b11      	cmp	r3, #17
 800228a:	d122      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_ADC_ConfigChannel+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_ADC_ConfigChannel+0x260>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40012300 	.word	0x40012300
 80022ec:	40012000 	.word	0x40012000
 80022f0:	10000012 	.word	0x10000012
 80022f4:	20000064 	.word	0x20000064
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002304:	4b79      	ldr	r3, [pc, #484]	; (80024ec <ADC_Init+0x1f0>)
 8002306:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <ADC_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e00f      	b.n	80023fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	005a      	lsls	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e007      	b.n	8002470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	051a      	lsls	r2, r3, #20
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b2:	025a      	lsls	r2, r3, #9
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	029a      	lsls	r2, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	0f000001 	.word	0x0f000001

080024f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fa4e 	bl	8001bd8 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d008      	beq.n	800275c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e052      	b.n	8002802 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0216 	bic.w	r2, r2, #22
 800276a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <HAL_DMA_Abort+0x62>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0208 	bic.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	e013      	b.n	80027d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ae:	f7ff fa13 	bl	8001bd8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d90c      	bls.n	80027d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e015      	b.n	8002802 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e4      	bne.n	80027ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	223f      	movs	r2, #63	; 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00c      	b.n	8002842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e165      	b.n	8002b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8154 	bne.w	8002b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80ae 	beq.w	8002b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_GPIO_Init+0x300>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a5c      	ldr	r2, [pc, #368]	; (8002b50 <HAL_GPIO_Init+0x300>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <HAL_GPIO_Init+0x300>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_GPIO_Init+0x304>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	; (8002b58 <HAL_GPIO_Init+0x308>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x21a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <HAL_GPIO_Init+0x30c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x216>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4d      	ldr	r2, [pc, #308]	; (8002b60 <HAL_GPIO_Init+0x310>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x212>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_GPIO_Init+0x314>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	; (8002b68 <HAL_GPIO_Init+0x318>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x20a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_GPIO_Init+0x31c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x206>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_GPIO_Init+0x320>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x202>
 8002a4e:	2306      	movs	r3, #6
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x21c>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae96 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cc      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d90c      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d044      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4934      	ldr	r1, [pc, #208]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe ff9c 	bl	8001bd8 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe ff98 	bl	8001bd8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20c      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f855 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fefc 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08005868 	.word	0x08005868
 8002d70:	20000064 	.word	0x20000064
 8002d74:	20000068 	.word	0x20000068

08002d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000064 	.word	0x20000064

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	08005878 	.word	0x08005878

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08005878 	.word	0x08005878

08002de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b0ae      	sub	sp, #184	; 0xb8
 8002de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e06:	4bcb      	ldr	r3, [pc, #812]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	f200 8206 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x440>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08003221 	.word	0x08003221
 8002e24:	08003221 	.word	0x08003221
 8002e28:	08003221 	.word	0x08003221
 8002e2c:	08002e59 	.word	0x08002e59
 8002e30:	08003221 	.word	0x08003221
 8002e34:	08003221 	.word	0x08003221
 8002e38:	08003221 	.word	0x08003221
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08003221 	.word	0x08003221
 8002e44:	08003221 	.word	0x08003221
 8002e48:	08003221 	.word	0x08003221
 8002e4c:	08003051 	.word	0x08003051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4bb9      	ldr	r3, [pc, #740]	; (8003138 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e56:	e1e7      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e58:	4bb8      	ldr	r3, [pc, #736]	; (800313c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5e:	e1e3      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4bb4      	ldr	r3, [pc, #720]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6c:	4bb1      	ldr	r3, [pc, #708]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d071      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4bae      	ldr	r3, [pc, #696]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6439      	str	r1, [r7, #64]	; 0x40
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4641      	mov	r1, r8
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4641      	mov	r1, r8
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ef8:	4649      	mov	r1, r9
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4641      	mov	r1, r8
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	462b      	mov	r3, r5
 8002f14:	460a      	mov	r2, r1
 8002f16:	eb42 0303 	adc.w	r3, r2, r3
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f28:	4629      	mov	r1, r5
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f32:	4621      	mov	r1, r4
 8002f34:	024a      	lsls	r2, r1, #9
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f4c:	f7fd fe74 	bl	8000c38 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5a:	e067      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b75      	ldr	r3, [pc, #468]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f76:	2300      	movs	r3, #0
 8002f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f7e:	4622      	mov	r2, r4
 8002f80:	462b      	mov	r3, r5
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	0159      	lsls	r1, r3, #5
 8002f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f90:	0150      	lsls	r0, r2, #5
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4621      	mov	r1, r4
 8002f98:	1a51      	subs	r1, r2, r1
 8002f9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	018b      	lsls	r3, r1, #6
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fba:	4641      	mov	r1, r8
 8002fbc:	018a      	lsls	r2, r1, #6
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fde:	4692      	mov	sl, r2
 8002fe0:	469b      	mov	fp, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	462b      	mov	r3, r5
 8002fec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ffe:	4629      	mov	r1, r5
 8003000:	028b      	lsls	r3, r1, #10
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003008:	4621      	mov	r1, r4
 800300a:	028a      	lsls	r2, r1, #10
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003014:	2200      	movs	r2, #0
 8003016:	673b      	str	r3, [r7, #112]	; 0x70
 8003018:	677a      	str	r2, [r7, #116]	; 0x74
 800301a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800301e:	f7fd fe0b 	bl	8000c38 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800302c:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800303e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800304e:	e0eb      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d06b      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_RCC_GetSysClockFreq+0x354>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	2200      	movs	r2, #0
 8003070:	66bb      	str	r3, [r7, #104]	; 0x68
 8003072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	663b      	str	r3, [r7, #96]	; 0x60
 800307c:	2300      	movs	r3, #0
 800307e:	667b      	str	r3, [r7, #100]	; 0x64
 8003080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003084:	4622      	mov	r2, r4
 8003086:	462b      	mov	r3, r5
 8003088:	f04f 0000 	mov.w	r0, #0
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	0159      	lsls	r1, r3, #5
 8003092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003096:	0150      	lsls	r0, r2, #5
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4621      	mov	r1, r4
 800309e:	1a51      	subs	r1, r2, r1
 80030a0:	61b9      	str	r1, [r7, #24]
 80030a2:	4629      	mov	r1, r5
 80030a4:	eb63 0301 	sbc.w	r3, r3, r1
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030b6:	4659      	mov	r1, fp
 80030b8:	018b      	lsls	r3, r1, #6
 80030ba:	4651      	mov	r1, sl
 80030bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c0:	4651      	mov	r1, sl
 80030c2:	018a      	lsls	r2, r1, #6
 80030c4:	4651      	mov	r1, sl
 80030c6:	ebb2 0801 	subs.w	r8, r2, r1
 80030ca:	4659      	mov	r1, fp
 80030cc:	eb63 0901 	sbc.w	r9, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e4:	4690      	mov	r8, r2
 80030e6:	4699      	mov	r9, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	eb18 0303 	adds.w	r3, r8, r3
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	462b      	mov	r3, r5
 80030f2:	eb49 0303 	adc.w	r3, r9, r3
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003104:	4629      	mov	r1, r5
 8003106:	024b      	lsls	r3, r1, #9
 8003108:	4621      	mov	r1, r4
 800310a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310e:	4621      	mov	r1, r4
 8003110:	024a      	lsls	r2, r1, #9
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800311a:	2200      	movs	r2, #0
 800311c:	65bb      	str	r3, [r7, #88]	; 0x58
 800311e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003124:	f7fd fd88 	bl	8000c38 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003132:	e065      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x420>
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003140:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_GetSysClockFreq+0x458>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2200      	movs	r2, #0
 8003148:	4618      	mov	r0, r3
 800314a:	4611      	mov	r1, r2
 800314c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003150:	653b      	str	r3, [r7, #80]	; 0x50
 8003152:	2300      	movs	r3, #0
 8003154:	657b      	str	r3, [r7, #84]	; 0x54
 8003156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800315a:	4642      	mov	r2, r8
 800315c:	464b      	mov	r3, r9
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4641      	mov	r1, r8
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4649      	mov	r1, r9
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800318c:	4659      	mov	r1, fp
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4651      	mov	r1, sl
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4651      	mov	r1, sl
 800319c:	1a54      	subs	r4, r2, r1
 800319e:	4659      	mov	r1, fp
 80031a0:	eb63 0501 	sbc.w	r5, r3, r1
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	464b      	mov	r3, r9
 80031c0:	eb45 0303 	adc.w	r3, r5, r3
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d2:	4629      	mov	r1, r5
 80031d4:	028b      	lsls	r3, r1, #10
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031dc:	4621      	mov	r1, r4
 80031de:	028a      	lsls	r2, r1, #10
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e8:	2200      	movs	r2, #0
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031f2:	f7fd fd21 	bl	8000c38 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4613      	mov	r3, r2
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCC_GetSysClockFreq+0x458>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0f1b      	lsrs	r3, r3, #28
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800320e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800321e:	e003      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800322c:	4618      	mov	r0, r3
 800322e:	37b8      	adds	r7, #184	; 0xb8
 8003230:	46bd      	mov	sp, r7
 8003232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e28d      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8083 	beq.w	8003366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003260:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d019      	beq.n	80032a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800326c:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003274:	2b08      	cmp	r3, #8
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003278:	4b8e      	ldr	r3, [pc, #568]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b84      	ldr	r3, [pc, #528]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x124>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e25a      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x90>
 80032c2:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7b      	ldr	r2, [pc, #492]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xcc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0xb4>
 80032da:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a75      	ldr	r2, [pc, #468]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xcc>
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6b      	ldr	r2, [pc, #428]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fc60 	bl	8001bd8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fc5c 	bl	8001bd8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e21f      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xdc>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fc4c 	bl	8001bd8 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fc48 	bl	8001bd8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e20b      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x104>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06f      	beq.n	8003452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800337e:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a2:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x186>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1d3      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4937      	ldr	r1, [pc, #220]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e03a      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCC_OscConfig+0x278>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fbf5 	bl	8001bd8 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe fbf1 	bl	8001bd8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1b4      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4925      	ldr	r1, [pc, #148]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x278>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fbd4 	bl	8001bd8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe fbd0 	bl	8001bd8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e193      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d036      	beq.n	80034cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_RCC_OscConfig+0x27c>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe fbb4 	bl	8001bd8 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe fbb0 	bl	8001bd8 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e173      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x234>
 8003492:	e01b      	b.n	80034cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_OscConfig+0x27c>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fb9d 	bl	8001bd8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e00e      	b.n	80034c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fb99 	bl	8001bd8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d907      	bls.n	80034c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e15c      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470000 	.word	0x42470000
 80034bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ea      	bne.n	80034a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8097 	beq.w	8003608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034de:	4b83      	ldr	r3, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a75      	ldr	r2, [pc, #468]	; (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7fe fb59 	bl	8001bd8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7fe fb55 	bl	8001bd8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e118      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b6c      	ldr	r3, [pc, #432]	; (80036f0 <HAL_RCC_OscConfig+0x4b0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x31e>
 8003550:	4b66      	ldr	r3, [pc, #408]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a65      	ldr	r2, [pc, #404]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
 800355c:	e01c      	b.n	8003598 <HAL_RCC_OscConfig+0x358>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x340>
 8003566:	4b61      	ldr	r3, [pc, #388]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a60      	ldr	r2, [pc, #384]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a5d      	ldr	r2, [pc, #372]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0x358>
 8003580:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a59      	ldr	r2, [pc, #356]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	4b57      	ldr	r3, [pc, #348]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a56      	ldr	r2, [pc, #344]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003592:	f023 0304 	bic.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fb1a 	bl	8001bd8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe fb16 	bl	8001bd8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0d7      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ee      	beq.n	80035a8 <HAL_RCC_OscConfig+0x368>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fb04 	bl	8001bd8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fb00 	bl	8001bd8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0c1      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ee      	bne.n	80035d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80ad 	beq.w	800376c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b08      	cmp	r3, #8
 800361c:	d060      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d145      	bne.n	80036b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe fad4 	bl	8001bd8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fad0 	bl	8001bd8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e093      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	491b      	ldr	r1, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe faa5 	bl	8001bd8 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe faa1 	bl	8001bd8 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e064      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x452>
 80036b0:	e05c      	b.n	800376c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_RCC_OscConfig+0x4b4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe fa8e 	bl	8001bd8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe fa8a 	bl	8001bd8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04d      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x480>
 80036de:	e045      	b.n	800376c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e040      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HAL_RCC_OscConfig+0x538>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d030      	beq.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d129      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d122      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800372e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003730:	4293      	cmp	r3, r2
 8003732:	d119      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d10f      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e03f      	b.n	800380e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe f8b2 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fe11 	bl	80043e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	; 0x28
 800381a:	af02      	add	r7, sp, #8
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b20      	cmp	r3, #32
 8003834:	d17c      	bne.n	8003930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_UART_Transmit+0x2c>
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e075      	b.n	8003932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_UART_Transmit+0x3e>
 8003850:	2302      	movs	r3, #2
 8003852:	e06e      	b.n	8003932 <HAL_UART_Transmit+0x11c>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2221      	movs	r2, #33	; 0x21
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800386a:	f7fe f9b5 	bl	8001bd8 <HAL_GetTick>
 800386e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003884:	d108      	bne.n	8003898 <HAL_UART_Transmit+0x82>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e003      	b.n	80038a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038a8:	e02a      	b.n	8003900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb51 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e036      	b.n	8003932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3302      	adds	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e007      	b.n	80038f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1cf      	bne.n	80038aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb21 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e006      	b.n	8003932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b08c      	sub	sp, #48	; 0x30
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	d152      	bne.n	80039fa <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e04b      	b.n	80039fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800396e:	2302      	movs	r3, #2
 8003970:	e044      	b.n	80039fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	461a      	mov	r2, r3
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fb56 	bl	8004038 <UART_Start_Receive_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003996:	2b00      	cmp	r3, #0
 8003998:	d12c      	bne.n	80039f4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d125      	bne.n	80039ee <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	617b      	str	r3, [r7, #20]
   return(result);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f043 0310 	orr.w	r3, r3, #16
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d8:	627a      	str	r2, [r7, #36]	; 0x24
 80039da:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80039ec:	e002      	b.n	80039f4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80039f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039f8:	e000      	b.n	80039fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0ba      	sub	sp, #232	; 0xe8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_UART_IRQHandler+0x66>
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fc05 	bl	8004272 <UART_Receive_IT>
      return;
 8003a68:	e256      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80de 	beq.w	8003c30 <HAL_UART_IRQHandler+0x22c>
 8003a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80d1 	beq.w	8003c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xae>
 8003a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xd2>
 8003abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_UART_IRQHandler+0xf6>
 8003ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_UART_IRQHandler+0x126>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 81ed 	beq.w	8003f0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_UART_IRQHandler+0x14e>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fb90 	bl	8004272 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <HAL_UART_IRQHandler+0x17a>
 8003b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04f      	beq.n	8003c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa98 	bl	80040b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d141      	bne.n	8003c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1d9      	bne.n	8003b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_UART_IRQHandler+0x3dc>)
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fe09 	bl	800280a <HAL_DMA_Abort_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e00e      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f99a 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	e00a      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f996 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e006      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f992 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c2a:	e170      	b.n	8003f0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	bf00      	nop
    return;
 8003c2e:	e16e      	b.n	8003f0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 814a 	bne.w	8003ece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8143 	beq.w	8003ece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 813c 	beq.w	8003ece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	f040 80b4 	bne.w	8003de4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8140 	beq.w	8003f12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f080 8139 	bcs.w	8003f12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb2:	f000 8088 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1d9      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e1      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e3      	bne.n	8003d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fcb2 	bl	800272a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd f8b0 	bl	8000f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ddc:	e099      	b.n	8003f12 <HAL_UART_IRQHandler+0x50e>
 8003dde:	bf00      	nop
 8003de0:	0800417b 	.word	0x0800417b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 808b 	beq.w	8003f16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8086 	beq.w	8003f16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e3      	bne.n	8003e0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	623b      	str	r3, [r7, #32]
   return(result);
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e66:	633a      	str	r2, [r7, #48]	; 0x30
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e3      	bne.n	8003e42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0310 	bic.w	r3, r3, #16
 8003e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003eac:	61fa      	str	r2, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e3      	bne.n	8003e88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd f838 	bl	8000f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ecc:	e023      	b.n	8003f16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_UART_IRQHandler+0x4ea>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f95b 	bl	80041a2 <UART_Transmit_IT>
    return;
 8003eec:	e014      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <HAL_UART_IRQHandler+0x514>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f99b 	bl	8004242 <UART_EndTransmit_IT>
    return;
 8003f0c:	e004      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
    return;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
      return;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
      return;
 8003f16:	bf00      	nop
  }
}
 8003f18:	37e8      	adds	r7, #232	; 0xe8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop

08003f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b090      	sub	sp, #64	; 0x40
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e050      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d04c      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7c:	f7fd fe2c 	bl	8001bd8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d241      	bcs.n	8004010 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fac:	637a      	str	r2, [r7, #52]	; 0x34
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe0:	623a      	str	r2, [r7, #32]
 8003fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e00f      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	429a      	cmp	r2, r3
 800402c:	d09f      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3740      	adds	r7, #64	; 0x40
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2222      	movs	r2, #34	; 0x22
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004084:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0220 	orr.w	r2, r2, #32
 80040a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b095      	sub	sp, #84	; 0x54
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040dc:	643a      	str	r2, [r7, #64]	; 0x40
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3314      	adds	r3, #20
 80040f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	2b01      	cmp	r3, #1
 800412a:	d119      	bne.n	8004160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60bb      	str	r3, [r7, #8]
   return(result);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	647b      	str	r3, [r7, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800414c:	61ba      	str	r2, [r7, #24]
 800414e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800416e:	bf00      	nop
 8004170:	3754      	adds	r7, #84	; 0x54
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff fed7 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b21      	cmp	r3, #33	; 0x21
 80041b4:	d13e      	bne.n	8004234 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d114      	bne.n	80041ea <UART_Transmit_IT+0x48>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]
 80041e8:	e008      	b.n	80041fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	1c59      	adds	r1, r3, #1
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6211      	str	r1, [r2, #32]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4619      	mov	r1, r3
 800420a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004258:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fe5c 	bl	8003f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08c      	sub	sp, #48	; 0x30
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b22      	cmp	r3, #34	; 0x22
 8004284:	f040 80ab 	bne.w	80043de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d117      	bne.n	80042c2 <UART_Receive_IT+0x50>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d113      	bne.n	80042c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	1c9a      	adds	r2, r3, #2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
 80042c0:	e026      	b.n	8004310 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d4:	d007      	beq.n	80042e6 <UART_Receive_IT+0x74>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <UART_Receive_IT+0x82>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e008      	b.n	8004306 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004300:	b2da      	uxtb	r2, r3
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4619      	mov	r1, r3
 800431e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004320:	2b00      	cmp	r3, #0
 8004322:	d15a      	bne.n	80043da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0220 	bic.w	r2, r2, #32
 8004332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d135      	bne.n	80043d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	623a      	str	r2, [r7, #32]
 800438c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	61bb      	str	r3, [r7, #24]
   return(result);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10a      	bne.n	80043c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc fdb7 	bl	8000f3c <HAL_UARTEx_RxEventCallback>
 80043ce:	e002      	b.n	80043d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdaf 	bl	8003f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e002      	b.n	80043e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b0c0      	sub	sp, #256	; 0x100
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	ea40 0301 	orr.w	r3, r0, r1
 8004410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	431a      	orrs	r2, r3
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004440:	f021 010c 	bic.w	r1, r1, #12
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	ea40 0301 	orr.w	r3, r0, r1
 800446e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8f      	ldr	r3, [pc, #572]	; (80046b4 <UART_SetConfig+0x2cc>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d005      	beq.n	8004488 <UART_SetConfig+0xa0>
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8d      	ldr	r3, [pc, #564]	; (80046b8 <UART_SetConfig+0x2d0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d104      	bne.n	8004492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe fc96 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 800448c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004490:	e003      	b.n	800449a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004492:	f7fe fc7d 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	f040 810c 	bne.w	80046c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044c2:	415b      	adcs	r3, r3
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ca:	4621      	mov	r1, r4
 80044cc:	eb12 0801 	adds.w	r8, r2, r1
 80044d0:	4629      	mov	r1, r5
 80044d2:	eb43 0901 	adc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044f8:	462b      	mov	r3, r5
 80044fa:	eb49 0303 	adc.w	r3, r9, r3
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800450e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004516:	460b      	mov	r3, r1
 8004518:	18db      	adds	r3, r3, r3
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
 800451c:	4613      	mov	r3, r2
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
 8004524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800452c:	f7fc fb84 	bl	8000c38 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4b61      	ldr	r3, [pc, #388]	; (80046bc <UART_SetConfig+0x2d4>)
 8004536:	fba3 2302 	umull	r2, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	011c      	lsls	r4, r3, #4
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800454c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	64b9      	str	r1, [r7, #72]	; 0x48
 8004558:	415b      	adcs	r3, r3
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004560:	4641      	mov	r1, r8
 8004562:	eb12 0a01 	adds.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0b01 	adc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	4692      	mov	sl, r2
 8004582:	469b      	mov	fp, r3
 8004584:	4643      	mov	r3, r8
 8004586:	eb1a 0303 	adds.w	r3, sl, r3
 800458a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800458e:	464b      	mov	r3, r9
 8004590:	eb4b 0303 	adc.w	r3, fp, r3
 8004594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045c2:	f7fc fb39 	bl	8000c38 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	; 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045e2:	4b36      	ldr	r3, [pc, #216]	; (80046bc <UART_SetConfig+0x2d4>)
 80045e4:	fba3 2302 	umull	r2, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f0:	441c      	add	r4, r3
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	1891      	adds	r1, r2, r2
 800460a:	63b9      	str	r1, [r7, #56]	; 0x38
 800460c:	415b      	adcs	r3, r3
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004614:	4641      	mov	r1, r8
 8004616:	1851      	adds	r1, r2, r1
 8004618:	6339      	str	r1, [r7, #48]	; 0x30
 800461a:	4649      	mov	r1, r9
 800461c:	414b      	adcs	r3, r1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800462c:	4659      	mov	r1, fp
 800462e:	00cb      	lsls	r3, r1, #3
 8004630:	4651      	mov	r1, sl
 8004632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004636:	4651      	mov	r1, sl
 8004638:	00ca      	lsls	r2, r1, #3
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	4603      	mov	r3, r0
 8004640:	4642      	mov	r2, r8
 8004642:	189b      	adds	r3, r3, r2
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004648:	464b      	mov	r3, r9
 800464a:	460a      	mov	r2, r1
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800467a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800467e:	f7fc fadb 	bl	8000c38 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <UART_SetConfig+0x2d4>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <UART_SetConfig+0x2d4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4422      	add	r2, r4
 80046ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b0:	e105      	b.n	80048be <UART_SetConfig+0x4d6>
 80046b2:	bf00      	nop
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046d2:	4642      	mov	r2, r8
 80046d4:	464b      	mov	r3, r9
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	6239      	str	r1, [r7, #32]
 80046da:	415b      	adcs	r3, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046e2:	4641      	mov	r1, r8
 80046e4:	1854      	adds	r4, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb43 0501 	adc.w	r5, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	00eb      	lsls	r3, r5, #3
 80046f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fa:	00e2      	lsls	r2, r4, #3
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	4643      	mov	r3, r8
 8004702:	18e3      	adds	r3, r4, r3
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004708:	464b      	mov	r3, r9
 800470a:	eb45 0303 	adc.w	r3, r5, r3
 800470e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800472e:	4629      	mov	r1, r5
 8004730:	008b      	lsls	r3, r1, #2
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004738:	4621      	mov	r1, r4
 800473a:	008a      	lsls	r2, r1, #2
 800473c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004740:	f7fc fa7a 	bl	8000c38 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b60      	ldr	r3, [pc, #384]	; (80048cc <UART_SetConfig+0x4e4>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011c      	lsls	r4, r3, #4
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800475c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	61b9      	str	r1, [r7, #24]
 800476c:	415b      	adcs	r3, r3
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6139      	str	r1, [r7, #16]
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047de:	f7fc fa2b 	bl	8000c38 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b39      	ldr	r3, [pc, #228]	; (80048cc <UART_SetConfig+0x4e4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a34      	ldr	r2, [pc, #208]	; (80048cc <UART_SetConfig+0x4e4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	441c      	add	r4, r3
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	673b      	str	r3, [r7, #112]	; 0x70
 8004810:	677a      	str	r2, [r7, #116]	; 0x74
 8004812:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004816:	4642      	mov	r2, r8
 8004818:	464b      	mov	r3, r9
 800481a:	1891      	adds	r1, r2, r2
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	415b      	adcs	r3, r3
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004826:	4641      	mov	r1, r8
 8004828:	1851      	adds	r1, r2, r1
 800482a:	6039      	str	r1, [r7, #0]
 800482c:	4649      	mov	r1, r9
 800482e:	414b      	adcs	r3, r1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800483e:	4659      	mov	r1, fp
 8004840:	00cb      	lsls	r3, r1, #3
 8004842:	4651      	mov	r1, sl
 8004844:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004848:	4651      	mov	r1, sl
 800484a:	00ca      	lsls	r2, r1, #3
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	4603      	mov	r3, r0
 8004852:	4642      	mov	r2, r8
 8004854:	189b      	adds	r3, r3, r2
 8004856:	66bb      	str	r3, [r7, #104]	; 0x68
 8004858:	464b      	mov	r3, r9
 800485a:	460a      	mov	r2, r1
 800485c:	eb42 0303 	adc.w	r3, r2, r3
 8004860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	663b      	str	r3, [r7, #96]	; 0x60
 800486c:	667a      	str	r2, [r7, #100]	; 0x64
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800487a:	4649      	mov	r1, r9
 800487c:	008b      	lsls	r3, r1, #2
 800487e:	4641      	mov	r1, r8
 8004880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004884:	4641      	mov	r1, r8
 8004886:	008a      	lsls	r2, r1, #2
 8004888:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800488c:	f7fc f9d4 	bl	8000c38 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <UART_SetConfig+0x4e4>)
 8004896:	fba3 1302 	umull	r1, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2164      	movs	r1, #100	; 0x64
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	; 0x32
 80048a8:	4a08      	ldr	r2, [pc, #32]	; (80048cc <UART_SetConfig+0x4e4>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 020f 	and.w	r2, r3, #15
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4422      	add	r2, r4
 80048bc:	609a      	str	r2, [r3, #8]
}
 80048be:	bf00      	nop
 80048c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ca:	bf00      	nop
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <__errno>:
 80048d0:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <__errno+0x8>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000070 	.word	0x20000070

080048dc <__libc_init_array>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4d0d      	ldr	r5, [pc, #52]	; (8004914 <__libc_init_array+0x38>)
 80048e0:	4c0d      	ldr	r4, [pc, #52]	; (8004918 <__libc_init_array+0x3c>)
 80048e2:	1b64      	subs	r4, r4, r5
 80048e4:	10a4      	asrs	r4, r4, #2
 80048e6:	2600      	movs	r6, #0
 80048e8:	42a6      	cmp	r6, r4
 80048ea:	d109      	bne.n	8004900 <__libc_init_array+0x24>
 80048ec:	4d0b      	ldr	r5, [pc, #44]	; (800491c <__libc_init_array+0x40>)
 80048ee:	4c0c      	ldr	r4, [pc, #48]	; (8004920 <__libc_init_array+0x44>)
 80048f0:	f000 fea6 	bl	8005640 <_init>
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	2600      	movs	r6, #0
 80048fa:	42a6      	cmp	r6, r4
 80048fc:	d105      	bne.n	800490a <__libc_init_array+0x2e>
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	f855 3b04 	ldr.w	r3, [r5], #4
 8004904:	4798      	blx	r3
 8004906:	3601      	adds	r6, #1
 8004908:	e7ee      	b.n	80048e8 <__libc_init_array+0xc>
 800490a:	f855 3b04 	ldr.w	r3, [r5], #4
 800490e:	4798      	blx	r3
 8004910:	3601      	adds	r6, #1
 8004912:	e7f2      	b.n	80048fa <__libc_init_array+0x1e>
 8004914:	080058bc 	.word	0x080058bc
 8004918:	080058bc 	.word	0x080058bc
 800491c:	080058bc 	.word	0x080058bc
 8004920:	080058c0 	.word	0x080058c0

08004924 <memset>:
 8004924:	4402      	add	r2, r0
 8004926:	4603      	mov	r3, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	d100      	bne.n	800492e <memset+0xa>
 800492c:	4770      	bx	lr
 800492e:	f803 1b01 	strb.w	r1, [r3], #1
 8004932:	e7f9      	b.n	8004928 <memset+0x4>

08004934 <sniprintf>:
 8004934:	b40c      	push	{r2, r3}
 8004936:	b530      	push	{r4, r5, lr}
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <sniprintf+0x64>)
 800493a:	1e0c      	subs	r4, r1, #0
 800493c:	681d      	ldr	r5, [r3, #0]
 800493e:	b09d      	sub	sp, #116	; 0x74
 8004940:	da08      	bge.n	8004954 <sniprintf+0x20>
 8004942:	238b      	movs	r3, #139	; 0x8b
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b01d      	add	sp, #116	; 0x74
 800494c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004950:	b002      	add	sp, #8
 8004952:	4770      	bx	lr
 8004954:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004958:	f8ad 3014 	strh.w	r3, [sp, #20]
 800495c:	bf14      	ite	ne
 800495e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004962:	4623      	moveq	r3, r4
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	9307      	str	r3, [sp, #28]
 8004968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800496c:	9002      	str	r0, [sp, #8]
 800496e:	9006      	str	r0, [sp, #24]
 8004970:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004974:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004976:	ab21      	add	r3, sp, #132	; 0x84
 8004978:	a902      	add	r1, sp, #8
 800497a:	4628      	mov	r0, r5
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	f000 f869 	bl	8004a54 <_svfiprintf_r>
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	bfbc      	itt	lt
 8004986:	238b      	movlt	r3, #139	; 0x8b
 8004988:	602b      	strlt	r3, [r5, #0]
 800498a:	2c00      	cmp	r4, #0
 800498c:	d0dd      	beq.n	800494a <sniprintf+0x16>
 800498e:	9b02      	ldr	r3, [sp, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e7d9      	b.n	800494a <sniprintf+0x16>
 8004996:	bf00      	nop
 8004998:	20000070 	.word	0x20000070

0800499c <__ssputs_r>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	688e      	ldr	r6, [r1, #8]
 80049a2:	429e      	cmp	r6, r3
 80049a4:	4682      	mov	sl, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	4690      	mov	r8, r2
 80049aa:	461f      	mov	r7, r3
 80049ac:	d838      	bhi.n	8004a20 <__ssputs_r+0x84>
 80049ae:	898a      	ldrh	r2, [r1, #12]
 80049b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049b4:	d032      	beq.n	8004a1c <__ssputs_r+0x80>
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	6909      	ldr	r1, [r1, #16]
 80049ba:	eba5 0901 	sub.w	r9, r5, r1
 80049be:	6965      	ldr	r5, [r4, #20]
 80049c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049c8:	3301      	adds	r3, #1
 80049ca:	444b      	add	r3, r9
 80049cc:	106d      	asrs	r5, r5, #1
 80049ce:	429d      	cmp	r5, r3
 80049d0:	bf38      	it	cc
 80049d2:	461d      	movcc	r5, r3
 80049d4:	0553      	lsls	r3, r2, #21
 80049d6:	d531      	bpl.n	8004a3c <__ssputs_r+0xa0>
 80049d8:	4629      	mov	r1, r5
 80049da:	f000 fb63 	bl	80050a4 <_malloc_r>
 80049de:	4606      	mov	r6, r0
 80049e0:	b950      	cbnz	r0, 80049f8 <__ssputs_r+0x5c>
 80049e2:	230c      	movs	r3, #12
 80049e4:	f8ca 3000 	str.w	r3, [sl]
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	6921      	ldr	r1, [r4, #16]
 80049fa:	464a      	mov	r2, r9
 80049fc:	f000 fabe 	bl	8004f7c <memcpy>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	6126      	str	r6, [r4, #16]
 8004a0e:	6165      	str	r5, [r4, #20]
 8004a10:	444e      	add	r6, r9
 8004a12:	eba5 0509 	sub.w	r5, r5, r9
 8004a16:	6026      	str	r6, [r4, #0]
 8004a18:	60a5      	str	r5, [r4, #8]
 8004a1a:	463e      	mov	r6, r7
 8004a1c:	42be      	cmp	r6, r7
 8004a1e:	d900      	bls.n	8004a22 <__ssputs_r+0x86>
 8004a20:	463e      	mov	r6, r7
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	4632      	mov	r2, r6
 8004a26:	4641      	mov	r1, r8
 8004a28:	f000 fab6 	bl	8004f98 <memmove>
 8004a2c:	68a3      	ldr	r3, [r4, #8]
 8004a2e:	1b9b      	subs	r3, r3, r6
 8004a30:	60a3      	str	r3, [r4, #8]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	4433      	add	r3, r6
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e7db      	b.n	80049f4 <__ssputs_r+0x58>
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	f000 fba5 	bl	800518c <_realloc_r>
 8004a42:	4606      	mov	r6, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1e1      	bne.n	8004a0c <__ssputs_r+0x70>
 8004a48:	6921      	ldr	r1, [r4, #16]
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	f000 fabe 	bl	8004fcc <_free_r>
 8004a50:	e7c7      	b.n	80049e2 <__ssputs_r+0x46>
	...

08004a54 <_svfiprintf_r>:
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a58:	4698      	mov	r8, r3
 8004a5a:	898b      	ldrh	r3, [r1, #12]
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	b09d      	sub	sp, #116	; 0x74
 8004a60:	4607      	mov	r7, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	4614      	mov	r4, r2
 8004a66:	d50e      	bpl.n	8004a86 <_svfiprintf_r+0x32>
 8004a68:	690b      	ldr	r3, [r1, #16]
 8004a6a:	b963      	cbnz	r3, 8004a86 <_svfiprintf_r+0x32>
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	f000 fb19 	bl	80050a4 <_malloc_r>
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	6128      	str	r0, [r5, #16]
 8004a76:	b920      	cbnz	r0, 8004a82 <_svfiprintf_r+0x2e>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e0d1      	b.n	8004c26 <_svfiprintf_r+0x1d2>
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	616b      	str	r3, [r5, #20]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a94:	2330      	movs	r3, #48	; 0x30
 8004a96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c40 <_svfiprintf_r+0x1ec>
 8004a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a9e:	f04f 0901 	mov.w	r9, #1
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aaa:	b10a      	cbz	r2, 8004ab0 <_svfiprintf_r+0x5c>
 8004aac:	2a25      	cmp	r2, #37	; 0x25
 8004aae:	d1f9      	bne.n	8004aa4 <_svfiprintf_r+0x50>
 8004ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab4:	d00b      	beq.n	8004ace <_svfiprintf_r+0x7a>
 8004ab6:	465b      	mov	r3, fp
 8004ab8:	4622      	mov	r2, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	4638      	mov	r0, r7
 8004abe:	f7ff ff6d 	bl	800499c <__ssputs_r>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f000 80aa 	beq.w	8004c1c <_svfiprintf_r+0x1c8>
 8004ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aca:	445a      	add	r2, fp
 8004acc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ace:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80a2 	beq.w	8004c1c <_svfiprintf_r+0x1c8>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f04f 32ff 	mov.w	r2, #4294967295
 8004ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae2:	f10a 0a01 	add.w	sl, sl, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	9307      	str	r3, [sp, #28]
 8004aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aee:	931a      	str	r3, [sp, #104]	; 0x68
 8004af0:	4654      	mov	r4, sl
 8004af2:	2205      	movs	r2, #5
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	4851      	ldr	r0, [pc, #324]	; (8004c40 <_svfiprintf_r+0x1ec>)
 8004afa:	f7fb fb91 	bl	8000220 <memchr>
 8004afe:	9a04      	ldr	r2, [sp, #16]
 8004b00:	b9d8      	cbnz	r0, 8004b3a <_svfiprintf_r+0xe6>
 8004b02:	06d0      	lsls	r0, r2, #27
 8004b04:	bf44      	itt	mi
 8004b06:	2320      	movmi	r3, #32
 8004b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b0c:	0711      	lsls	r1, r2, #28
 8004b0e:	bf44      	itt	mi
 8004b10:	232b      	movmi	r3, #43	; 0x2b
 8004b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b16:	f89a 3000 	ldrb.w	r3, [sl]
 8004b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1c:	d015      	beq.n	8004b4a <_svfiprintf_r+0xf6>
 8004b1e:	9a07      	ldr	r2, [sp, #28]
 8004b20:	4654      	mov	r4, sl
 8004b22:	2000      	movs	r0, #0
 8004b24:	f04f 0c0a 	mov.w	ip, #10
 8004b28:	4621      	mov	r1, r4
 8004b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2e:	3b30      	subs	r3, #48	; 0x30
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d94e      	bls.n	8004bd2 <_svfiprintf_r+0x17e>
 8004b34:	b1b0      	cbz	r0, 8004b64 <_svfiprintf_r+0x110>
 8004b36:	9207      	str	r2, [sp, #28]
 8004b38:	e014      	b.n	8004b64 <_svfiprintf_r+0x110>
 8004b3a:	eba0 0308 	sub.w	r3, r0, r8
 8004b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b42:	4313      	orrs	r3, r2
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	46a2      	mov	sl, r4
 8004b48:	e7d2      	b.n	8004af0 <_svfiprintf_r+0x9c>
 8004b4a:	9b03      	ldr	r3, [sp, #12]
 8004b4c:	1d19      	adds	r1, r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	9103      	str	r1, [sp, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bfbb      	ittet	lt
 8004b56:	425b      	neglt	r3, r3
 8004b58:	f042 0202 	orrlt.w	r2, r2, #2
 8004b5c:	9307      	strge	r3, [sp, #28]
 8004b5e:	9307      	strlt	r3, [sp, #28]
 8004b60:	bfb8      	it	lt
 8004b62:	9204      	strlt	r2, [sp, #16]
 8004b64:	7823      	ldrb	r3, [r4, #0]
 8004b66:	2b2e      	cmp	r3, #46	; 0x2e
 8004b68:	d10c      	bne.n	8004b84 <_svfiprintf_r+0x130>
 8004b6a:	7863      	ldrb	r3, [r4, #1]
 8004b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6e:	d135      	bne.n	8004bdc <_svfiprintf_r+0x188>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	1d1a      	adds	r2, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	9203      	str	r2, [sp, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfb8      	it	lt
 8004b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b80:	3402      	adds	r4, #2
 8004b82:	9305      	str	r3, [sp, #20]
 8004b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c50 <_svfiprintf_r+0x1fc>
 8004b88:	7821      	ldrb	r1, [r4, #0]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	f7fb fb47 	bl	8000220 <memchr>
 8004b92:	b140      	cbz	r0, 8004ba6 <_svfiprintf_r+0x152>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	eba0 000a 	sub.w	r0, r0, sl
 8004b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b9e:	9b04      	ldr	r3, [sp, #16]
 8004ba0:	4303      	orrs	r3, r0
 8004ba2:	3401      	adds	r4, #1
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004baa:	4826      	ldr	r0, [pc, #152]	; (8004c44 <_svfiprintf_r+0x1f0>)
 8004bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	f7fb fb35 	bl	8000220 <memchr>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d038      	beq.n	8004c2c <_svfiprintf_r+0x1d8>
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <_svfiprintf_r+0x1f4>)
 8004bbc:	bb1b      	cbnz	r3, 8004c06 <_svfiprintf_r+0x1b2>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bcc:	4433      	add	r3, r6
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	e767      	b.n	8004aa2 <_svfiprintf_r+0x4e>
 8004bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	2001      	movs	r0, #1
 8004bda:	e7a5      	b.n	8004b28 <_svfiprintf_r+0xd4>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	3401      	adds	r4, #1
 8004be0:	9305      	str	r3, [sp, #20]
 8004be2:	4619      	mov	r1, r3
 8004be4:	f04f 0c0a 	mov.w	ip, #10
 8004be8:	4620      	mov	r0, r4
 8004bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bee:	3a30      	subs	r2, #48	; 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d903      	bls.n	8004bfc <_svfiprintf_r+0x1a8>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0c5      	beq.n	8004b84 <_svfiprintf_r+0x130>
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	e7c3      	b.n	8004b84 <_svfiprintf_r+0x130>
 8004bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c00:	4604      	mov	r4, r0
 8004c02:	2301      	movs	r3, #1
 8004c04:	e7f0      	b.n	8004be8 <_svfiprintf_r+0x194>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <_svfiprintf_r+0x1f8>)
 8004c0e:	a904      	add	r1, sp, #16
 8004c10:	4638      	mov	r0, r7
 8004c12:	f3af 8000 	nop.w
 8004c16:	1c42      	adds	r2, r0, #1
 8004c18:	4606      	mov	r6, r0
 8004c1a:	d1d6      	bne.n	8004bca <_svfiprintf_r+0x176>
 8004c1c:	89ab      	ldrh	r3, [r5, #12]
 8004c1e:	065b      	lsls	r3, r3, #25
 8004c20:	f53f af2c 	bmi.w	8004a7c <_svfiprintf_r+0x28>
 8004c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c26:	b01d      	add	sp, #116	; 0x74
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2c:	ab03      	add	r3, sp, #12
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	462a      	mov	r2, r5
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <_svfiprintf_r+0x1f8>)
 8004c34:	a904      	add	r1, sp, #16
 8004c36:	4638      	mov	r0, r7
 8004c38:	f000 f87a 	bl	8004d30 <_printf_i>
 8004c3c:	e7eb      	b.n	8004c16 <_svfiprintf_r+0x1c2>
 8004c3e:	bf00      	nop
 8004c40:	08005880 	.word	0x08005880
 8004c44:	0800588a 	.word	0x0800588a
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	0800499d 	.word	0x0800499d
 8004c50:	08005886 	.word	0x08005886

08004c54 <_printf_common>:
 8004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	4616      	mov	r6, r2
 8004c5a:	4699      	mov	r9, r3
 8004c5c:	688a      	ldr	r2, [r1, #8]
 8004c5e:	690b      	ldr	r3, [r1, #16]
 8004c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bfb8      	it	lt
 8004c68:	4613      	movlt	r3, r2
 8004c6a:	6033      	str	r3, [r6, #0]
 8004c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c70:	4607      	mov	r7, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	b10a      	cbz	r2, 8004c7a <_printf_common+0x26>
 8004c76:	3301      	adds	r3, #1
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	0699      	lsls	r1, r3, #26
 8004c7e:	bf42      	ittt	mi
 8004c80:	6833      	ldrmi	r3, [r6, #0]
 8004c82:	3302      	addmi	r3, #2
 8004c84:	6033      	strmi	r3, [r6, #0]
 8004c86:	6825      	ldr	r5, [r4, #0]
 8004c88:	f015 0506 	ands.w	r5, r5, #6
 8004c8c:	d106      	bne.n	8004c9c <_printf_common+0x48>
 8004c8e:	f104 0a19 	add.w	sl, r4, #25
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	6832      	ldr	r2, [r6, #0]
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	dc26      	bgt.n	8004cea <_printf_common+0x96>
 8004c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca0:	1e13      	subs	r3, r2, #0
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	bf18      	it	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	0692      	lsls	r2, r2, #26
 8004caa:	d42b      	bmi.n	8004d04 <_printf_common+0xb0>
 8004cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d01e      	beq.n	8004cf8 <_printf_common+0xa4>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	68e5      	ldr	r5, [r4, #12]
 8004cbe:	6832      	ldr	r2, [r6, #0]
 8004cc0:	f003 0306 	and.w	r3, r3, #6
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	bf08      	it	eq
 8004cc8:	1aad      	subeq	r5, r5, r2
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	bf0c      	ite	eq
 8004cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd4:	2500      	movne	r5, #0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bfc4      	itt	gt
 8004cda:	1a9b      	subgt	r3, r3, r2
 8004cdc:	18ed      	addgt	r5, r5, r3
 8004cde:	2600      	movs	r6, #0
 8004ce0:	341a      	adds	r4, #26
 8004ce2:	42b5      	cmp	r5, r6
 8004ce4:	d11a      	bne.n	8004d1c <_printf_common+0xc8>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e008      	b.n	8004cfc <_printf_common+0xa8>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4652      	mov	r2, sl
 8004cee:	4649      	mov	r1, r9
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	47c0      	blx	r8
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d103      	bne.n	8004d00 <_printf_common+0xac>
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	3501      	adds	r5, #1
 8004d02:	e7c6      	b.n	8004c92 <_printf_common+0x3e>
 8004d04:	18e1      	adds	r1, r4, r3
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	2030      	movs	r0, #48	; 0x30
 8004d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d0e:	4422      	add	r2, r4
 8004d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d18:	3302      	adds	r3, #2
 8004d1a:	e7c7      	b.n	8004cac <_printf_common+0x58>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	4622      	mov	r2, r4
 8004d20:	4649      	mov	r1, r9
 8004d22:	4638      	mov	r0, r7
 8004d24:	47c0      	blx	r8
 8004d26:	3001      	adds	r0, #1
 8004d28:	d0e6      	beq.n	8004cf8 <_printf_common+0xa4>
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7d9      	b.n	8004ce2 <_printf_common+0x8e>
	...

08004d30 <_printf_i>:
 8004d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	7e0f      	ldrb	r7, [r1, #24]
 8004d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d38:	2f78      	cmp	r7, #120	; 0x78
 8004d3a:	4691      	mov	r9, r2
 8004d3c:	4680      	mov	r8, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	469a      	mov	sl, r3
 8004d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d46:	d807      	bhi.n	8004d58 <_printf_i+0x28>
 8004d48:	2f62      	cmp	r7, #98	; 0x62
 8004d4a:	d80a      	bhi.n	8004d62 <_printf_i+0x32>
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	f000 80d8 	beq.w	8004f02 <_printf_i+0x1d2>
 8004d52:	2f58      	cmp	r7, #88	; 0x58
 8004d54:	f000 80a3 	beq.w	8004e9e <_printf_i+0x16e>
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d60:	e03a      	b.n	8004dd8 <_printf_i+0xa8>
 8004d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d66:	2b15      	cmp	r3, #21
 8004d68:	d8f6      	bhi.n	8004d58 <_printf_i+0x28>
 8004d6a:	a101      	add	r1, pc, #4	; (adr r1, 8004d70 <_printf_i+0x40>)
 8004d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004d59 	.word	0x08004d59
 8004d7c:	08004d59 	.word	0x08004d59
 8004d80:	08004d59 	.word	0x08004d59
 8004d84:	08004d59 	.word	0x08004d59
 8004d88:	08004ddd 	.word	0x08004ddd
 8004d8c:	08004d59 	.word	0x08004d59
 8004d90:	08004d59 	.word	0x08004d59
 8004d94:	08004d59 	.word	0x08004d59
 8004d98:	08004d59 	.word	0x08004d59
 8004d9c:	08004ee9 	.word	0x08004ee9
 8004da0:	08004e0d 	.word	0x08004e0d
 8004da4:	08004ecb 	.word	0x08004ecb
 8004da8:	08004d59 	.word	0x08004d59
 8004dac:	08004d59 	.word	0x08004d59
 8004db0:	08004f0b 	.word	0x08004f0b
 8004db4:	08004d59 	.word	0x08004d59
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d59 	.word	0x08004d59
 8004dc0:	08004d59 	.word	0x08004d59
 8004dc4:	08004ed3 	.word	0x08004ed3
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0a3      	b.n	8004f24 <_printf_i+0x1f4>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	6829      	ldr	r1, [r5, #0]
 8004de0:	0606      	lsls	r6, r0, #24
 8004de2:	f101 0304 	add.w	r3, r1, #4
 8004de6:	d50a      	bpl.n	8004dfe <_printf_i+0xce>
 8004de8:	680e      	ldr	r6, [r1, #0]
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	da03      	bge.n	8004df8 <_printf_i+0xc8>
 8004df0:	232d      	movs	r3, #45	; 0x2d
 8004df2:	4276      	negs	r6, r6
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df8:	485e      	ldr	r0, [pc, #376]	; (8004f74 <_printf_i+0x244>)
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	e019      	b.n	8004e32 <_printf_i+0x102>
 8004dfe:	680e      	ldr	r6, [r1, #0]
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e06:	bf18      	it	ne
 8004e08:	b236      	sxthne	r6, r6
 8004e0a:	e7ef      	b.n	8004dec <_printf_i+0xbc>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	6029      	str	r1, [r5, #0]
 8004e14:	0601      	lsls	r1, r0, #24
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0xec>
 8004e18:	681e      	ldr	r6, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0xf2>
 8004e1c:	0646      	lsls	r6, r0, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0xe8>
 8004e20:	881e      	ldrh	r6, [r3, #0]
 8004e22:	4854      	ldr	r0, [pc, #336]	; (8004f74 <_printf_i+0x244>)
 8004e24:	2f6f      	cmp	r7, #111	; 0x6f
 8004e26:	bf0c      	ite	eq
 8004e28:	2308      	moveq	r3, #8
 8004e2a:	230a      	movne	r3, #10
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e32:	6865      	ldr	r5, [r4, #4]
 8004e34:	60a5      	str	r5, [r4, #8]
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	bfa2      	ittt	ge
 8004e3a:	6821      	ldrge	r1, [r4, #0]
 8004e3c:	f021 0104 	bicge.w	r1, r1, #4
 8004e40:	6021      	strge	r1, [r4, #0]
 8004e42:	b90e      	cbnz	r6, 8004e48 <_printf_i+0x118>
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	d04d      	beq.n	8004ee4 <_printf_i+0x1b4>
 8004e48:	4615      	mov	r5, r2
 8004e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e52:	5dc7      	ldrb	r7, [r0, r7]
 8004e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e58:	4637      	mov	r7, r6
 8004e5a:	42bb      	cmp	r3, r7
 8004e5c:	460e      	mov	r6, r1
 8004e5e:	d9f4      	bls.n	8004e4a <_printf_i+0x11a>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10b      	bne.n	8004e7c <_printf_i+0x14c>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07de      	lsls	r6, r3, #31
 8004e68:	d508      	bpl.n	8004e7c <_printf_i+0x14c>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	6861      	ldr	r1, [r4, #4]
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	bfde      	ittt	le
 8004e72:	2330      	movle	r3, #48	; 0x30
 8004e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e7c:	1b52      	subs	r2, r2, r5
 8004e7e:	6122      	str	r2, [r4, #16]
 8004e80:	f8cd a000 	str.w	sl, [sp]
 8004e84:	464b      	mov	r3, r9
 8004e86:	aa03      	add	r2, sp, #12
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7ff fee2 	bl	8004c54 <_printf_common>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d14c      	bne.n	8004f2e <_printf_i+0x1fe>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	b004      	add	sp, #16
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	4835      	ldr	r0, [pc, #212]	; (8004f74 <_printf_i+0x244>)
 8004ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ea4:	6829      	ldr	r1, [r5, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eac:	6029      	str	r1, [r5, #0]
 8004eae:	061d      	lsls	r5, r3, #24
 8004eb0:	d514      	bpl.n	8004edc <_printf_i+0x1ac>
 8004eb2:	07df      	lsls	r7, r3, #31
 8004eb4:	bf44      	itt	mi
 8004eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eba:	6023      	strmi	r3, [r4, #0]
 8004ebc:	b91e      	cbnz	r6, 8004ec6 <_printf_i+0x196>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	f023 0320 	bic.w	r3, r3, #32
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	e7b0      	b.n	8004e2c <_printf_i+0xfc>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	2378      	movs	r3, #120	; 0x78
 8004ed4:	4828      	ldr	r0, [pc, #160]	; (8004f78 <_printf_i+0x248>)
 8004ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eda:	e7e3      	b.n	8004ea4 <_printf_i+0x174>
 8004edc:	0659      	lsls	r1, r3, #25
 8004ede:	bf48      	it	mi
 8004ee0:	b2b6      	uxthmi	r6, r6
 8004ee2:	e7e6      	b.n	8004eb2 <_printf_i+0x182>
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	e7bb      	b.n	8004e60 <_printf_i+0x130>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	6826      	ldr	r6, [r4, #0]
 8004eec:	6961      	ldr	r1, [r4, #20]
 8004eee:	1d18      	adds	r0, r3, #4
 8004ef0:	6028      	str	r0, [r5, #0]
 8004ef2:	0635      	lsls	r5, r6, #24
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0x1cc>
 8004ef8:	6019      	str	r1, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <_printf_i+0x1d2>
 8004efc:	0670      	lsls	r0, r6, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0x1c8>
 8004f00:	8019      	strh	r1, [r3, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	4615      	mov	r5, r2
 8004f08:	e7ba      	b.n	8004e80 <_printf_i+0x150>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	1d1a      	adds	r2, r3, #4
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	681d      	ldr	r5, [r3, #0]
 8004f12:	6862      	ldr	r2, [r4, #4]
 8004f14:	2100      	movs	r1, #0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7fb f982 	bl	8000220 <memchr>
 8004f1c:	b108      	cbz	r0, 8004f22 <_printf_i+0x1f2>
 8004f1e:	1b40      	subs	r0, r0, r5
 8004f20:	6060      	str	r0, [r4, #4]
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	2300      	movs	r3, #0
 8004f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f2c:	e7a8      	b.n	8004e80 <_printf_i+0x150>
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	462a      	mov	r2, r5
 8004f32:	4649      	mov	r1, r9
 8004f34:	4640      	mov	r0, r8
 8004f36:	47d0      	blx	sl
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d0ab      	beq.n	8004e94 <_printf_i+0x164>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	079b      	lsls	r3, r3, #30
 8004f40:	d413      	bmi.n	8004f6a <_printf_i+0x23a>
 8004f42:	68e0      	ldr	r0, [r4, #12]
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	4298      	cmp	r0, r3
 8004f48:	bfb8      	it	lt
 8004f4a:	4618      	movlt	r0, r3
 8004f4c:	e7a4      	b.n	8004e98 <_printf_i+0x168>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4632      	mov	r2, r6
 8004f52:	4649      	mov	r1, r9
 8004f54:	4640      	mov	r0, r8
 8004f56:	47d0      	blx	sl
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d09b      	beq.n	8004e94 <_printf_i+0x164>
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	68e3      	ldr	r3, [r4, #12]
 8004f60:	9903      	ldr	r1, [sp, #12]
 8004f62:	1a5b      	subs	r3, r3, r1
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	dcf2      	bgt.n	8004f4e <_printf_i+0x21e>
 8004f68:	e7eb      	b.n	8004f42 <_printf_i+0x212>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	f104 0619 	add.w	r6, r4, #25
 8004f70:	e7f5      	b.n	8004f5e <_printf_i+0x22e>
 8004f72:	bf00      	nop
 8004f74:	08005891 	.word	0x08005891
 8004f78:	080058a2 	.word	0x080058a2

08004f7c <memcpy>:
 8004f7c:	440a      	add	r2, r1
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f84:	d100      	bne.n	8004f88 <memcpy+0xc>
 8004f86:	4770      	bx	lr
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f92:	4291      	cmp	r1, r2
 8004f94:	d1f9      	bne.n	8004f8a <memcpy+0xe>
 8004f96:	bd10      	pop	{r4, pc}

08004f98 <memmove>:
 8004f98:	4288      	cmp	r0, r1
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	eb01 0402 	add.w	r4, r1, r2
 8004fa0:	d902      	bls.n	8004fa8 <memmove+0x10>
 8004fa2:	4284      	cmp	r4, r0
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	d807      	bhi.n	8004fb8 <memmove+0x20>
 8004fa8:	1e43      	subs	r3, r0, #1
 8004faa:	42a1      	cmp	r1, r4
 8004fac:	d008      	beq.n	8004fc0 <memmove+0x28>
 8004fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fb6:	e7f8      	b.n	8004faa <memmove+0x12>
 8004fb8:	4402      	add	r2, r0
 8004fba:	4601      	mov	r1, r0
 8004fbc:	428a      	cmp	r2, r1
 8004fbe:	d100      	bne.n	8004fc2 <memmove+0x2a>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fca:	e7f7      	b.n	8004fbc <memmove+0x24>

08004fcc <_free_r>:
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d044      	beq.n	800505c <_free_r+0x90>
 8004fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd6:	9001      	str	r0, [sp, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f1a1 0404 	sub.w	r4, r1, #4
 8004fde:	bfb8      	it	lt
 8004fe0:	18e4      	addlt	r4, r4, r3
 8004fe2:	f000 f913 	bl	800520c <__malloc_lock>
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <_free_r+0x94>)
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	b933      	cbnz	r3, 8004ffc <_free_r+0x30>
 8004fee:	6063      	str	r3, [r4, #4]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff8:	f000 b90e 	b.w	8005218 <__malloc_unlock>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d908      	bls.n	8005012 <_free_r+0x46>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1949      	addeq	r1, r1, r5
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	e7ed      	b.n	8004fee <_free_r+0x22>
 8005012:	461a      	mov	r2, r3
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b10b      	cbz	r3, 800501c <_free_r+0x50>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d9fa      	bls.n	8005012 <_free_r+0x46>
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	1855      	adds	r5, r2, r1
 8005020:	42a5      	cmp	r5, r4
 8005022:	d10b      	bne.n	800503c <_free_r+0x70>
 8005024:	6824      	ldr	r4, [r4, #0]
 8005026:	4421      	add	r1, r4
 8005028:	1854      	adds	r4, r2, r1
 800502a:	42a3      	cmp	r3, r4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	d1e0      	bne.n	8004ff2 <_free_r+0x26>
 8005030:	681c      	ldr	r4, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6053      	str	r3, [r2, #4]
 8005036:	4421      	add	r1, r4
 8005038:	6011      	str	r1, [r2, #0]
 800503a:	e7da      	b.n	8004ff2 <_free_r+0x26>
 800503c:	d902      	bls.n	8005044 <_free_r+0x78>
 800503e:	230c      	movs	r3, #12
 8005040:	6003      	str	r3, [r0, #0]
 8005042:	e7d6      	b.n	8004ff2 <_free_r+0x26>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	1961      	adds	r1, r4, r5
 8005048:	428b      	cmp	r3, r1
 800504a:	bf04      	itt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	bf04      	itt	eq
 8005054:	1949      	addeq	r1, r1, r5
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	6054      	str	r4, [r2, #4]
 800505a:	e7ca      	b.n	8004ff2 <_free_r+0x26>
 800505c:	b003      	add	sp, #12
 800505e:	bd30      	pop	{r4, r5, pc}
 8005060:	20000384 	.word	0x20000384

08005064 <sbrk_aligned>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0e      	ldr	r6, [pc, #56]	; (80050a0 <sbrk_aligned+0x3c>)
 8005068:	460c      	mov	r4, r1
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4605      	mov	r5, r0
 800506e:	b911      	cbnz	r1, 8005076 <sbrk_aligned+0x12>
 8005070:	f000 f8bc 	bl	80051ec <_sbrk_r>
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 f8b7 	bl	80051ec <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d00a      	beq.n	8005098 <sbrk_aligned+0x34>
 8005082:	1cc4      	adds	r4, r0, #3
 8005084:	f024 0403 	bic.w	r4, r4, #3
 8005088:	42a0      	cmp	r0, r4
 800508a:	d007      	beq.n	800509c <sbrk_aligned+0x38>
 800508c:	1a21      	subs	r1, r4, r0
 800508e:	4628      	mov	r0, r5
 8005090:	f000 f8ac 	bl	80051ec <_sbrk_r>
 8005094:	3001      	adds	r0, #1
 8005096:	d101      	bne.n	800509c <sbrk_aligned+0x38>
 8005098:	f04f 34ff 	mov.w	r4, #4294967295
 800509c:	4620      	mov	r0, r4
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	20000388 	.word	0x20000388

080050a4 <_malloc_r>:
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	1ccd      	adds	r5, r1, #3
 80050aa:	f025 0503 	bic.w	r5, r5, #3
 80050ae:	3508      	adds	r5, #8
 80050b0:	2d0c      	cmp	r5, #12
 80050b2:	bf38      	it	cc
 80050b4:	250c      	movcc	r5, #12
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	4607      	mov	r7, r0
 80050ba:	db01      	blt.n	80050c0 <_malloc_r+0x1c>
 80050bc:	42a9      	cmp	r1, r5
 80050be:	d905      	bls.n	80050cc <_malloc_r+0x28>
 80050c0:	230c      	movs	r3, #12
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	2600      	movs	r6, #0
 80050c6:	4630      	mov	r0, r6
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	4e2e      	ldr	r6, [pc, #184]	; (8005188 <_malloc_r+0xe4>)
 80050ce:	f000 f89d 	bl	800520c <__malloc_lock>
 80050d2:	6833      	ldr	r3, [r6, #0]
 80050d4:	461c      	mov	r4, r3
 80050d6:	bb34      	cbnz	r4, 8005126 <_malloc_r+0x82>
 80050d8:	4629      	mov	r1, r5
 80050da:	4638      	mov	r0, r7
 80050dc:	f7ff ffc2 	bl	8005064 <sbrk_aligned>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	4604      	mov	r4, r0
 80050e4:	d14d      	bne.n	8005182 <_malloc_r+0xde>
 80050e6:	6834      	ldr	r4, [r6, #0]
 80050e8:	4626      	mov	r6, r4
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d140      	bne.n	8005170 <_malloc_r+0xcc>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4638      	mov	r0, r7
 80050f4:	eb04 0803 	add.w	r8, r4, r3
 80050f8:	f000 f878 	bl	80051ec <_sbrk_r>
 80050fc:	4580      	cmp	r8, r0
 80050fe:	d13a      	bne.n	8005176 <_malloc_r+0xd2>
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	3503      	adds	r5, #3
 8005104:	1a6d      	subs	r5, r5, r1
 8005106:	f025 0503 	bic.w	r5, r5, #3
 800510a:	3508      	adds	r5, #8
 800510c:	2d0c      	cmp	r5, #12
 800510e:	bf38      	it	cc
 8005110:	250c      	movcc	r5, #12
 8005112:	4629      	mov	r1, r5
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ffa5 	bl	8005064 <sbrk_aligned>
 800511a:	3001      	adds	r0, #1
 800511c:	d02b      	beq.n	8005176 <_malloc_r+0xd2>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	442b      	add	r3, r5
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	e00e      	b.n	8005144 <_malloc_r+0xa0>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	1b52      	subs	r2, r2, r5
 800512a:	d41e      	bmi.n	800516a <_malloc_r+0xc6>
 800512c:	2a0b      	cmp	r2, #11
 800512e:	d916      	bls.n	800515e <_malloc_r+0xba>
 8005130:	1961      	adds	r1, r4, r5
 8005132:	42a3      	cmp	r3, r4
 8005134:	6025      	str	r5, [r4, #0]
 8005136:	bf18      	it	ne
 8005138:	6059      	strne	r1, [r3, #4]
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	bf08      	it	eq
 800513e:	6031      	streq	r1, [r6, #0]
 8005140:	5162      	str	r2, [r4, r5]
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	4638      	mov	r0, r7
 8005146:	f104 060b 	add.w	r6, r4, #11
 800514a:	f000 f865 	bl	8005218 <__malloc_unlock>
 800514e:	f026 0607 	bic.w	r6, r6, #7
 8005152:	1d23      	adds	r3, r4, #4
 8005154:	1af2      	subs	r2, r6, r3
 8005156:	d0b6      	beq.n	80050c6 <_malloc_r+0x22>
 8005158:	1b9b      	subs	r3, r3, r6
 800515a:	50a3      	str	r3, [r4, r2]
 800515c:	e7b3      	b.n	80050c6 <_malloc_r+0x22>
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	42a3      	cmp	r3, r4
 8005162:	bf0c      	ite	eq
 8005164:	6032      	streq	r2, [r6, #0]
 8005166:	605a      	strne	r2, [r3, #4]
 8005168:	e7ec      	b.n	8005144 <_malloc_r+0xa0>
 800516a:	4623      	mov	r3, r4
 800516c:	6864      	ldr	r4, [r4, #4]
 800516e:	e7b2      	b.n	80050d6 <_malloc_r+0x32>
 8005170:	4634      	mov	r4, r6
 8005172:	6876      	ldr	r6, [r6, #4]
 8005174:	e7b9      	b.n	80050ea <_malloc_r+0x46>
 8005176:	230c      	movs	r3, #12
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4638      	mov	r0, r7
 800517c:	f000 f84c 	bl	8005218 <__malloc_unlock>
 8005180:	e7a1      	b.n	80050c6 <_malloc_r+0x22>
 8005182:	6025      	str	r5, [r4, #0]
 8005184:	e7de      	b.n	8005144 <_malloc_r+0xa0>
 8005186:	bf00      	nop
 8005188:	20000384 	.word	0x20000384

0800518c <_realloc_r>:
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	4680      	mov	r8, r0
 8005192:	4614      	mov	r4, r2
 8005194:	460e      	mov	r6, r1
 8005196:	b921      	cbnz	r1, 80051a2 <_realloc_r+0x16>
 8005198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4611      	mov	r1, r2
 800519e:	f7ff bf81 	b.w	80050a4 <_malloc_r>
 80051a2:	b92a      	cbnz	r2, 80051b0 <_realloc_r+0x24>
 80051a4:	f7ff ff12 	bl	8004fcc <_free_r>
 80051a8:	4625      	mov	r5, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	f000 f838 	bl	8005224 <_malloc_usable_size_r>
 80051b4:	4284      	cmp	r4, r0
 80051b6:	4607      	mov	r7, r0
 80051b8:	d802      	bhi.n	80051c0 <_realloc_r+0x34>
 80051ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051be:	d812      	bhi.n	80051e6 <_realloc_r+0x5a>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff ff6e 	bl	80050a4 <_malloc_r>
 80051c8:	4605      	mov	r5, r0
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0ed      	beq.n	80051aa <_realloc_r+0x1e>
 80051ce:	42bc      	cmp	r4, r7
 80051d0:	4622      	mov	r2, r4
 80051d2:	4631      	mov	r1, r6
 80051d4:	bf28      	it	cs
 80051d6:	463a      	movcs	r2, r7
 80051d8:	f7ff fed0 	bl	8004f7c <memcpy>
 80051dc:	4631      	mov	r1, r6
 80051de:	4640      	mov	r0, r8
 80051e0:	f7ff fef4 	bl	8004fcc <_free_r>
 80051e4:	e7e1      	b.n	80051aa <_realloc_r+0x1e>
 80051e6:	4635      	mov	r5, r6
 80051e8:	e7df      	b.n	80051aa <_realloc_r+0x1e>
	...

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fc fc16 	bl	8001a28 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	2000038c 	.word	0x2000038c

0800520c <__malloc_lock>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__malloc_lock+0x8>)
 800520e:	f000 b811 	b.w	8005234 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	20000390 	.word	0x20000390

08005218 <__malloc_unlock>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__malloc_unlock+0x8>)
 800521a:	f000 b80c 	b.w	8005236 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	20000390 	.word	0x20000390

08005224 <_malloc_usable_size_r>:
 8005224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005228:	1f18      	subs	r0, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	bfbc      	itt	lt
 800522e:	580b      	ldrlt	r3, [r1, r0]
 8005230:	18c0      	addlt	r0, r0, r3
 8005232:	4770      	bx	lr

08005234 <__retarget_lock_acquire_recursive>:
 8005234:	4770      	bx	lr

08005236 <__retarget_lock_release_recursive>:
 8005236:	4770      	bx	lr

08005238 <log>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	ed2d 8b02 	vpush	{d8}
 800523e:	ec55 4b10 	vmov	r4, r5, d0
 8005242:	f000 f839 	bl	80052b8 <__ieee754_log>
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	4620      	mov	r0, r4
 800524c:	4629      	mov	r1, r5
 800524e:	eeb0 8a40 	vmov.f32	s16, s0
 8005252:	eef0 8a60 	vmov.f32	s17, s1
 8005256:	f7fb fc89 	bl	8000b6c <__aeabi_dcmpun>
 800525a:	b998      	cbnz	r0, 8005284 <log+0x4c>
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f7fb fc78 	bl	8000b58 <__aeabi_dcmpgt>
 8005268:	b960      	cbnz	r0, 8005284 <log+0x4c>
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8005276:	b160      	cbz	r0, 8005292 <log+0x5a>
 8005278:	f7ff fb2a 	bl	80048d0 <__errno>
 800527c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80052a8 <log+0x70>
 8005280:	2322      	movs	r3, #34	; 0x22
 8005282:	6003      	str	r3, [r0, #0]
 8005284:	eeb0 0a48 	vmov.f32	s0, s16
 8005288:	eef0 0a68 	vmov.f32	s1, s17
 800528c:	ecbd 8b02 	vpop	{d8}
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	f7ff fb1d 	bl	80048d0 <__errno>
 8005296:	ecbd 8b02 	vpop	{d8}
 800529a:	2321      	movs	r3, #33	; 0x21
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a2:	4803      	ldr	r0, [pc, #12]	; (80052b0 <log+0x78>)
 80052a4:	f000 b9c4 	b.w	8005630 <nan>
 80052a8:	00000000 	.word	0x00000000
 80052ac:	fff00000 	.word	0xfff00000
 80052b0:	08005885 	.word	0x08005885
 80052b4:	00000000 	.word	0x00000000

080052b8 <__ieee754_log>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	ec51 0b10 	vmov	r0, r1, d0
 80052c0:	ed2d 8b04 	vpush	{d8-d9}
 80052c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80052c8:	b083      	sub	sp, #12
 80052ca:	460d      	mov	r5, r1
 80052cc:	da29      	bge.n	8005322 <__ieee754_log+0x6a>
 80052ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052d2:	4303      	orrs	r3, r0
 80052d4:	ee10 2a10 	vmov	r2, s0
 80052d8:	d10c      	bne.n	80052f4 <__ieee754_log+0x3c>
 80052da:	49cf      	ldr	r1, [pc, #828]	; (8005618 <__ieee754_log+0x360>)
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	2000      	movs	r0, #0
 80052e2:	f7fb fad3 	bl	800088c <__aeabi_ddiv>
 80052e6:	ec41 0b10 	vmov	d0, r0, r1
 80052ea:	b003      	add	sp, #12
 80052ec:	ecbd 8b04 	vpop	{d8-d9}
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	2900      	cmp	r1, #0
 80052f6:	da05      	bge.n	8005304 <__ieee754_log+0x4c>
 80052f8:	460b      	mov	r3, r1
 80052fa:	f7fa ffe5 	bl	80002c8 <__aeabi_dsub>
 80052fe:	2200      	movs	r2, #0
 8005300:	2300      	movs	r3, #0
 8005302:	e7ee      	b.n	80052e2 <__ieee754_log+0x2a>
 8005304:	4bc5      	ldr	r3, [pc, #788]	; (800561c <__ieee754_log+0x364>)
 8005306:	2200      	movs	r2, #0
 8005308:	f7fb f996 	bl	8000638 <__aeabi_dmul>
 800530c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005310:	460d      	mov	r5, r1
 8005312:	4ac3      	ldr	r2, [pc, #780]	; (8005620 <__ieee754_log+0x368>)
 8005314:	4295      	cmp	r5, r2
 8005316:	dd06      	ble.n	8005326 <__ieee754_log+0x6e>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	f7fa ffd6 	bl	80002cc <__adddf3>
 8005320:	e7e1      	b.n	80052e6 <__ieee754_log+0x2e>
 8005322:	2300      	movs	r3, #0
 8005324:	e7f5      	b.n	8005312 <__ieee754_log+0x5a>
 8005326:	152c      	asrs	r4, r5, #20
 8005328:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800532c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005330:	441c      	add	r4, r3
 8005332:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005336:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800533a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005342:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005346:	ea42 0105 	orr.w	r1, r2, r5
 800534a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800534e:	2200      	movs	r2, #0
 8005350:	4bb4      	ldr	r3, [pc, #720]	; (8005624 <__ieee754_log+0x36c>)
 8005352:	f7fa ffb9 	bl	80002c8 <__aeabi_dsub>
 8005356:	1cab      	adds	r3, r5, #2
 8005358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800535c:	2b02      	cmp	r3, #2
 800535e:	4682      	mov	sl, r0
 8005360:	468b      	mov	fp, r1
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	dc53      	bgt.n	8005410 <__ieee754_log+0x158>
 8005368:	2300      	movs	r3, #0
 800536a:	f7fb fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800536e:	b1d0      	cbz	r0, 80053a6 <__ieee754_log+0xee>
 8005370:	2c00      	cmp	r4, #0
 8005372:	f000 8122 	beq.w	80055ba <__ieee754_log+0x302>
 8005376:	4620      	mov	r0, r4
 8005378:	f7fb f8f4 	bl	8000564 <__aeabi_i2d>
 800537c:	a390      	add	r3, pc, #576	; (adr r3, 80055c0 <__ieee754_log+0x308>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	4606      	mov	r6, r0
 8005384:	460f      	mov	r7, r1
 8005386:	f7fb f957 	bl	8000638 <__aeabi_dmul>
 800538a:	a38f      	add	r3, pc, #572	; (adr r3, 80055c8 <__ieee754_log+0x310>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb f94e 	bl	8000638 <__aeabi_dmul>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	e7ba      	b.n	800531c <__ieee754_log+0x64>
 80053a6:	a38a      	add	r3, pc, #552	; (adr r3, 80055d0 <__ieee754_log+0x318>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	4650      	mov	r0, sl
 80053ae:	4659      	mov	r1, fp
 80053b0:	f7fb f942 	bl	8000638 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	2000      	movs	r0, #0
 80053ba:	499b      	ldr	r1, [pc, #620]	; (8005628 <__ieee754_log+0x370>)
 80053bc:	f7fa ff84 	bl	80002c8 <__aeabi_dsub>
 80053c0:	4652      	mov	r2, sl
 80053c2:	4606      	mov	r6, r0
 80053c4:	460f      	mov	r7, r1
 80053c6:	465b      	mov	r3, fp
 80053c8:	4650      	mov	r0, sl
 80053ca:	4659      	mov	r1, fp
 80053cc:	f7fb f934 	bl	8000638 <__aeabi_dmul>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4630      	mov	r0, r6
 80053d6:	4639      	mov	r1, r7
 80053d8:	f7fb f92e 	bl	8000638 <__aeabi_dmul>
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	b914      	cbnz	r4, 80053e8 <__ieee754_log+0x130>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	e0a2      	b.n	800552e <__ieee754_log+0x276>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7fb f8bb 	bl	8000564 <__aeabi_i2d>
 80053ee:	a374      	add	r3, pc, #464	; (adr r3, 80055c0 <__ieee754_log+0x308>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	4680      	mov	r8, r0
 80053f6:	4689      	mov	r9, r1
 80053f8:	f7fb f91e 	bl	8000638 <__aeabi_dmul>
 80053fc:	a372      	add	r3, pc, #456	; (adr r3, 80055c8 <__ieee754_log+0x310>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb f915 	bl	8000638 <__aeabi_dmul>
 800540e:	e0a7      	b.n	8005560 <__ieee754_log+0x2a8>
 8005410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005414:	f7fa ff5a 	bl	80002cc <__adddf3>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4650      	mov	r0, sl
 800541e:	4659      	mov	r1, fp
 8005420:	f7fb fa34 	bl	800088c <__aeabi_ddiv>
 8005424:	ec41 0b18 	vmov	d8, r0, r1
 8005428:	4620      	mov	r0, r4
 800542a:	f7fb f89b 	bl	8000564 <__aeabi_i2d>
 800542e:	ec53 2b18 	vmov	r2, r3, d8
 8005432:	ec41 0b19 	vmov	d9, r0, r1
 8005436:	ec51 0b18 	vmov	r0, r1, d8
 800543a:	f7fb f8fd 	bl	8000638 <__aeabi_dmul>
 800543e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005442:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4680      	mov	r8, r0
 800544e:	4689      	mov	r9, r1
 8005450:	f7fb f8f2 	bl	8000638 <__aeabi_dmul>
 8005454:	a360      	add	r3, pc, #384	; (adr r3, 80055d8 <__ieee754_log+0x320>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	4606      	mov	r6, r0
 800545c:	460f      	mov	r7, r1
 800545e:	f7fb f8eb 	bl	8000638 <__aeabi_dmul>
 8005462:	a35f      	add	r3, pc, #380	; (adr r3, 80055e0 <__ieee754_log+0x328>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fa ff30 	bl	80002cc <__adddf3>
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	f7fb f8e2 	bl	8000638 <__aeabi_dmul>
 8005474:	a35c      	add	r3, pc, #368	; (adr r3, 80055e8 <__ieee754_log+0x330>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fa ff27 	bl	80002cc <__adddf3>
 800547e:	4632      	mov	r2, r6
 8005480:	463b      	mov	r3, r7
 8005482:	f7fb f8d9 	bl	8000638 <__aeabi_dmul>
 8005486:	a35a      	add	r3, pc, #360	; (adr r3, 80055f0 <__ieee754_log+0x338>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa ff1e 	bl	80002cc <__adddf3>
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	f7fb f8d0 	bl	8000638 <__aeabi_dmul>
 8005498:	a357      	add	r3, pc, #348	; (adr r3, 80055f8 <__ieee754_log+0x340>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	4680      	mov	r8, r0
 80054a0:	4689      	mov	r9, r1
 80054a2:	4630      	mov	r0, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	f7fb f8c7 	bl	8000638 <__aeabi_dmul>
 80054aa:	a355      	add	r3, pc, #340	; (adr r3, 8005600 <__ieee754_log+0x348>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa ff0c 	bl	80002cc <__adddf3>
 80054b4:	4632      	mov	r2, r6
 80054b6:	463b      	mov	r3, r7
 80054b8:	f7fb f8be 	bl	8000638 <__aeabi_dmul>
 80054bc:	a352      	add	r3, pc, #328	; (adr r3, 8005608 <__ieee754_log+0x350>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fa ff03 	bl	80002cc <__adddf3>
 80054c6:	4632      	mov	r2, r6
 80054c8:	463b      	mov	r3, r7
 80054ca:	f7fb f8b5 	bl	8000638 <__aeabi_dmul>
 80054ce:	460b      	mov	r3, r1
 80054d0:	4602      	mov	r2, r0
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	f7fa fef9 	bl	80002cc <__adddf3>
 80054da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80054de:	9b01      	ldr	r3, [sp, #4]
 80054e0:	3551      	adds	r5, #81	; 0x51
 80054e2:	431d      	orrs	r5, r3
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	4680      	mov	r8, r0
 80054e8:	4689      	mov	r9, r1
 80054ea:	dd48      	ble.n	800557e <__ieee754_log+0x2c6>
 80054ec:	4b4e      	ldr	r3, [pc, #312]	; (8005628 <__ieee754_log+0x370>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	4650      	mov	r0, sl
 80054f2:	4659      	mov	r1, fp
 80054f4:	f7fb f8a0 	bl	8000638 <__aeabi_dmul>
 80054f8:	4652      	mov	r2, sl
 80054fa:	465b      	mov	r3, fp
 80054fc:	f7fb f89c 	bl	8000638 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	f7fa fede 	bl	80002cc <__adddf3>
 8005510:	ec53 2b18 	vmov	r2, r3, d8
 8005514:	f7fb f890 	bl	8000638 <__aeabi_dmul>
 8005518:	4680      	mov	r8, r0
 800551a:	4689      	mov	r9, r1
 800551c:	b964      	cbnz	r4, 8005538 <__ieee754_log+0x280>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4630      	mov	r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	f7fa fecf 	bl	80002c8 <__aeabi_dsub>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4650      	mov	r0, sl
 8005530:	4659      	mov	r1, fp
 8005532:	f7fa fec9 	bl	80002c8 <__aeabi_dsub>
 8005536:	e6d6      	b.n	80052e6 <__ieee754_log+0x2e>
 8005538:	a321      	add	r3, pc, #132	; (adr r3, 80055c0 <__ieee754_log+0x308>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	ec51 0b19 	vmov	r0, r1, d9
 8005542:	f7fb f879 	bl	8000638 <__aeabi_dmul>
 8005546:	a320      	add	r3, pc, #128	; (adr r3, 80055c8 <__ieee754_log+0x310>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	4604      	mov	r4, r0
 800554e:	460d      	mov	r5, r1
 8005550:	ec51 0b19 	vmov	r0, r1, d9
 8005554:	f7fb f870 	bl	8000638 <__aeabi_dmul>
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	f7fa feb6 	bl	80002cc <__adddf3>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fa feae 	bl	80002c8 <__aeabi_dsub>
 800556c:	4652      	mov	r2, sl
 800556e:	465b      	mov	r3, fp
 8005570:	f7fa feaa 	bl	80002c8 <__aeabi_dsub>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4620      	mov	r0, r4
 800557a:	4629      	mov	r1, r5
 800557c:	e7d9      	b.n	8005532 <__ieee754_log+0x27a>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4650      	mov	r0, sl
 8005584:	4659      	mov	r1, fp
 8005586:	f7fa fe9f 	bl	80002c8 <__aeabi_dsub>
 800558a:	ec53 2b18 	vmov	r2, r3, d8
 800558e:	f7fb f853 	bl	8000638 <__aeabi_dmul>
 8005592:	4606      	mov	r6, r0
 8005594:	460f      	mov	r7, r1
 8005596:	2c00      	cmp	r4, #0
 8005598:	f43f af23 	beq.w	80053e2 <__ieee754_log+0x12a>
 800559c:	a308      	add	r3, pc, #32	; (adr r3, 80055c0 <__ieee754_log+0x308>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	ec51 0b19 	vmov	r0, r1, d9
 80055a6:	f7fb f847 	bl	8000638 <__aeabi_dmul>
 80055aa:	a307      	add	r3, pc, #28	; (adr r3, 80055c8 <__ieee754_log+0x310>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	4604      	mov	r4, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	ec51 0b19 	vmov	r0, r1, d9
 80055b8:	e727      	b.n	800540a <__ieee754_log+0x152>
 80055ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005610 <__ieee754_log+0x358>
 80055be:	e694      	b.n	80052ea <__ieee754_log+0x32>
 80055c0:	fee00000 	.word	0xfee00000
 80055c4:	3fe62e42 	.word	0x3fe62e42
 80055c8:	35793c76 	.word	0x35793c76
 80055cc:	3dea39ef 	.word	0x3dea39ef
 80055d0:	55555555 	.word	0x55555555
 80055d4:	3fd55555 	.word	0x3fd55555
 80055d8:	df3e5244 	.word	0xdf3e5244
 80055dc:	3fc2f112 	.word	0x3fc2f112
 80055e0:	96cb03de 	.word	0x96cb03de
 80055e4:	3fc74664 	.word	0x3fc74664
 80055e8:	94229359 	.word	0x94229359
 80055ec:	3fd24924 	.word	0x3fd24924
 80055f0:	55555593 	.word	0x55555593
 80055f4:	3fe55555 	.word	0x3fe55555
 80055f8:	d078c69f 	.word	0xd078c69f
 80055fc:	3fc39a09 	.word	0x3fc39a09
 8005600:	1d8e78af 	.word	0x1d8e78af
 8005604:	3fcc71c5 	.word	0x3fcc71c5
 8005608:	9997fa04 	.word	0x9997fa04
 800560c:	3fd99999 	.word	0x3fd99999
	...
 8005618:	c3500000 	.word	0xc3500000
 800561c:	43500000 	.word	0x43500000
 8005620:	7fefffff 	.word	0x7fefffff
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	00000000 	.word	0x00000000

08005630 <nan>:
 8005630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005638 <nan+0x8>
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	00000000 	.word	0x00000000
 800563c:	7ff80000 	.word	0x7ff80000

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
